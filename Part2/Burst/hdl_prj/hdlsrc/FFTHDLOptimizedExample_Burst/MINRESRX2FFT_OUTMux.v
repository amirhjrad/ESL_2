// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Burst\MINRESRX2FFT_OUTMux.v
// Created: 2024-05-11 18:31:33
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MINRESRX2FFT_OUTMux
// Source Path: FFTHDLOptimizedExample_Burst/FFT Burst/FFT/MINRESRX2FFT_OUTMux
// Hierarchy Level: 2
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MINRESRX2FFT_OUTMux
          (clk,
           reset,
           rdEnb1,
           rdEnb2,
           rdEnb3,
           dMemOut1_re,
           dMemOut1_im,
           dMemOut2_re,
           dMemOut2_im,
           vldOut,
           dOut_re,
           dOut_im,
           dout_vld);


  input   clk;
  input   reset;
  input   rdEnb1;
  input   rdEnb2;
  input   rdEnb3;
  input   signed [24:0] dMemOut1_re;  // sfix25_En13
  input   signed [24:0] dMemOut1_im;  // sfix25_En13
  input   signed [24:0] dMemOut2_re;  // sfix25_En13
  input   signed [24:0] dMemOut2_im;  // sfix25_En13
  input   vldOut;
  output  signed [24:0] dOut_re;  // sfix25_En13
  output  signed [24:0] dOut_im;  // sfix25_En13
  output  dout_vld;


  reg signed [24:0] minResRX2FFTOutMux_doutReg_re;  // sfix25
  reg signed [24:0] minResRX2FFTOutMux_doutReg_im;  // sfix25
  reg  minResRX2FFTOutMux_doutReg_vld;
  reg  minResRX2FFTOutMux_rdEnb1Dly;
  reg  minResRX2FFTOutMux_rdEnb2Dly;
  reg  minResRX2FFTOutMux_rdEnb3Dly;
  reg signed [24:0] minResRX2FFTOutMux_doutReg_re_next;  // sfix25_En13
  reg signed [24:0] minResRX2FFTOutMux_doutReg_im_next;  // sfix25_En13
  reg  minResRX2FFTOutMux_doutReg_vld_next;
  reg  minResRX2FFTOutMux_rdEnb1Dly_next;
  reg  minResRX2FFTOutMux_rdEnb2Dly_next;
  reg  minResRX2FFTOutMux_rdEnb3Dly_next;
  reg signed [24:0] dOut_re_1;  // sfix25_En13
  reg signed [24:0] dOut_im_1;  // sfix25_En13
  reg  dout_vld_1;


  // minResRX2FFTOutMux
  always @(posedge clk or posedge reset)
    begin : minResRX2FFTOutMux_process
      if (reset == 1'b1) begin
        minResRX2FFTOutMux_doutReg_re <= 25'sb0000000000000000000000000;
        minResRX2FFTOutMux_doutReg_im <= 25'sb0000000000000000000000000;
        minResRX2FFTOutMux_doutReg_vld <= 1'b0;
        minResRX2FFTOutMux_rdEnb1Dly <= 1'b0;
        minResRX2FFTOutMux_rdEnb2Dly <= 1'b0;
        minResRX2FFTOutMux_rdEnb3Dly <= 1'b0;
      end
      else begin
        minResRX2FFTOutMux_doutReg_re <= minResRX2FFTOutMux_doutReg_re_next;
        minResRX2FFTOutMux_doutReg_im <= minResRX2FFTOutMux_doutReg_im_next;
        minResRX2FFTOutMux_doutReg_vld <= minResRX2FFTOutMux_doutReg_vld_next;
        minResRX2FFTOutMux_rdEnb1Dly <= minResRX2FFTOutMux_rdEnb1Dly_next;
        minResRX2FFTOutMux_rdEnb2Dly <= minResRX2FFTOutMux_rdEnb2Dly_next;
        minResRX2FFTOutMux_rdEnb3Dly <= minResRX2FFTOutMux_rdEnb3Dly_next;
      end
    end

  always @(dMemOut1_im, dMemOut1_re, dMemOut2_im, dMemOut2_re,
       minResRX2FFTOutMux_doutReg_im, minResRX2FFTOutMux_doutReg_re,
       minResRX2FFTOutMux_doutReg_vld, minResRX2FFTOutMux_rdEnb1Dly,
       minResRX2FFTOutMux_rdEnb2Dly, minResRX2FFTOutMux_rdEnb3Dly, rdEnb1,
       rdEnb2, rdEnb3, vldOut) begin
    minResRX2FFTOutMux_doutReg_re_next = minResRX2FFTOutMux_doutReg_re;
    minResRX2FFTOutMux_doutReg_im_next = minResRX2FFTOutMux_doutReg_im;
    if (vldOut) begin
      minResRX2FFTOutMux_doutReg_vld_next = 1'b1;
      if (minResRX2FFTOutMux_rdEnb2Dly || minResRX2FFTOutMux_rdEnb3Dly) begin
        minResRX2FFTOutMux_doutReg_re_next = dMemOut2_re;
        minResRX2FFTOutMux_doutReg_im_next = dMemOut2_im;
      end
      else if (minResRX2FFTOutMux_rdEnb1Dly) begin
        minResRX2FFTOutMux_doutReg_re_next = dMemOut1_re;
        minResRX2FFTOutMux_doutReg_im_next = dMemOut1_im;
      end
      else begin
        minResRX2FFTOutMux_doutReg_vld_next = 1'b0;
      end
    end
    else begin
      minResRX2FFTOutMux_doutReg_vld_next = 1'b0;
    end
    minResRX2FFTOutMux_rdEnb1Dly_next = rdEnb1;
    minResRX2FFTOutMux_rdEnb2Dly_next = rdEnb2;
    minResRX2FFTOutMux_rdEnb3Dly_next = rdEnb3;
    dOut_re_1 = minResRX2FFTOutMux_doutReg_re;
    dOut_im_1 = minResRX2FFTOutMux_doutReg_im;
    dout_vld_1 = minResRX2FFTOutMux_doutReg_vld;
  end



  assign dOut_re = dOut_re_1;

  assign dOut_im = dOut_im_1;

  assign dout_vld = dout_vld_1;

endmodule  // MINRESRX2FFT_OUTMux

