// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Burst\TWDLROM.v
// Created: 2024-05-11 18:31:33
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TWDLROM
// Source Path: FFTHDLOptimizedExample_Burst/FFT Burst/FFT/TWDLROM
// Hierarchy Level: 2
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TWDLROM
          (clk,
           reset,
           dMemOutDly_vld,
           stage,
           initIC,
           twdl_re,
           twdl_im);


  input   clk;
  input   reset;
  input   dMemOutDly_vld;
  input   [3:0] stage;  // ufix4
  input   initIC;
  output  signed [24:0] twdl_re;  // sfix25_En23
  output  signed [24:0] twdl_im;  // sfix25_En23


  reg [7:0] minResRX2FFTTwdlMapping_baseAddr;  // ufix8
  reg [7:0] minResRX2FFTTwdlMapping_cnt;  // ufix8
  reg [2:0] minResRX2FFTTwdlMapping_octantReg1;  // ufix3
  reg [8:0] minResRX2FFTTwdlMapping_twdlAddr_raw;  // ufix9
  reg [5:0] minResRX2FFTTwdlMapping_twdlAddrMap;  // ufix6
  reg  minResRX2FFTTwdlMapping_twdl45Reg;
  reg  minResRX2FFTTwdlMapping_dvldReg1;
  reg  minResRX2FFTTwdlMapping_dvldReg2;
  reg [7:0] minResRX2FFTTwdlMapping_maxCnt;  // ufix8
  reg [7:0] minResRX2FFTTwdlMapping_baseAddr_next;  // ufix8
  reg [7:0] minResRX2FFTTwdlMapping_cnt_next;  // ufix8
  reg [2:0] minResRX2FFTTwdlMapping_octantReg1_next;  // ufix3
  reg [8:0] minResRX2FFTTwdlMapping_twdlAddr_raw_next;  // ufix9
  reg [5:0] minResRX2FFTTwdlMapping_twdlAddrMap_next;  // ufix6
  reg  minResRX2FFTTwdlMapping_twdl45Reg_next;
  reg  minResRX2FFTTwdlMapping_dvldReg1_next;
  reg  minResRX2FFTTwdlMapping_dvldReg2_next;
  reg [7:0] minResRX2FFTTwdlMapping_maxCnt_next;  // ufix8
  reg [5:0] twdlAddr;  // ufix6
  reg  twdlAddrVld;
  reg [2:0] twdlOctant;  // ufix3
  reg  twdl45;
  wire signed [24:0] Twiddle_re_table_data [0:63];  // sfix25_En23 [64]
  wire signed [24:0] twiddleS_re;  // sfix25_En23
  reg signed [24:0] twiddleReg_re;  // sfix25_En23
  wire signed [24:0] Twiddle_im_table_data [0:63];  // sfix25_En23 [64]
  wire signed [24:0] twiddleS_im;  // sfix25_En23
  reg signed [24:0] twiddleReg_im;  // sfix25_En23
  reg [2:0] twdlOctantReg;  // ufix3
  reg  twdl45Reg;
  reg signed [24:0] twdl_re_1;  // sfix25_En23
  reg signed [24:0] twdl_im_1;  // sfix25_En23
  reg [2:0] minResRX2FFTTwdlMapping_octant;  // ufix3
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_cast;  // sfix20_En6
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_temp;  // sfix20_En6
  reg signed [10:0] minResRX2FFTTwdlMapping_sub_temp_0;  // sfix11
  reg signed [10:0] minResRX2FFTTwdlMapping_sub_temp_1;  // sfix11
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_cast_0;  // sfix20_En6
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_temp_2;  // sfix20_En6
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_cast_1;  // sfix20_En6
  reg signed [19:0] minResRX2FFTTwdlMapping_sub_temp_3;  // sfix20_En6
  reg [7:0] minResRX2FFTTwdlMapping_t_0_0;  // ufix8
  reg signed [10:0] minResRX2FFTTwdlMapping_t_1;  // sfix11
  reg signed [10:0] minResRX2FFTTwdlMapping_t_2_0;  // sfix11
  reg signed [24:0] Radix22TwdlOctCorr_twdlIn_re;  // sfix25_En23
  reg signed [24:0] Radix22TwdlOctCorr_twdlIn_im;  // sfix25_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_0;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_1;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_2;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_3;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_4;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_5;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_6;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_7;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_8;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_9;  // sfix26_En23
  reg signed [25:0] Radix22TwdlOctCorr_cast_10;  // sfix26_En23


  // minResRX2FFTTwdlMapping
  always @(posedge clk or posedge reset)
    begin : minResRX2FFTTwdlMapping_process
      if (reset == 1'b1) begin
        minResRX2FFTTwdlMapping_octantReg1 <= 3'b000;
        minResRX2FFTTwdlMapping_twdlAddr_raw <= 9'b000000000;
        minResRX2FFTTwdlMapping_twdlAddrMap <= 6'b000000;
        minResRX2FFTTwdlMapping_twdl45Reg <= 1'b0;
        minResRX2FFTTwdlMapping_dvldReg1 <= 1'b0;
        minResRX2FFTTwdlMapping_dvldReg2 <= 1'b0;
        minResRX2FFTTwdlMapping_baseAddr <= 8'b00000000;
        minResRX2FFTTwdlMapping_cnt <= 8'b11111111;
        minResRX2FFTTwdlMapping_maxCnt <= 8'b00000000;
      end
      else begin
        minResRX2FFTTwdlMapping_baseAddr <= minResRX2FFTTwdlMapping_baseAddr_next;
        minResRX2FFTTwdlMapping_cnt <= minResRX2FFTTwdlMapping_cnt_next;
        minResRX2FFTTwdlMapping_octantReg1 <= minResRX2FFTTwdlMapping_octantReg1_next;
        minResRX2FFTTwdlMapping_twdlAddr_raw <= minResRX2FFTTwdlMapping_twdlAddr_raw_next;
        minResRX2FFTTwdlMapping_twdlAddrMap <= minResRX2FFTTwdlMapping_twdlAddrMap_next;
        minResRX2FFTTwdlMapping_twdl45Reg <= minResRX2FFTTwdlMapping_twdl45Reg_next;
        minResRX2FFTTwdlMapping_dvldReg1 <= minResRX2FFTTwdlMapping_dvldReg1_next;
        minResRX2FFTTwdlMapping_dvldReg2 <= minResRX2FFTTwdlMapping_dvldReg2_next;
        minResRX2FFTTwdlMapping_maxCnt <= minResRX2FFTTwdlMapping_maxCnt_next;
      end
    end

  always @(dMemOutDly_vld, initIC, minResRX2FFTTwdlMapping_baseAddr,
       minResRX2FFTTwdlMapping_cnt, minResRX2FFTTwdlMapping_dvldReg1,
       minResRX2FFTTwdlMapping_dvldReg2, minResRX2FFTTwdlMapping_maxCnt,
       minResRX2FFTTwdlMapping_octantReg1, minResRX2FFTTwdlMapping_twdl45Reg,
       minResRX2FFTTwdlMapping_twdlAddrMap,
       minResRX2FFTTwdlMapping_twdlAddr_raw, stage) begin
    minResRX2FFTTwdlMapping_sub_temp = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_sub_temp_0 = 11'sb00000000000;
    minResRX2FFTTwdlMapping_sub_temp_1 = 11'sb00000000000;
    minResRX2FFTTwdlMapping_sub_temp_2 = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_sub_temp_3 = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_sub_cast_1 = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_sub_cast_0 = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_t_2_0 = 11'sb00000000000;
    minResRX2FFTTwdlMapping_t_1 = 11'sb00000000000;
    minResRX2FFTTwdlMapping_sub_cast = 20'sb00000000000000000000;
    minResRX2FFTTwdlMapping_baseAddr_next = minResRX2FFTTwdlMapping_baseAddr;
    minResRX2FFTTwdlMapping_cnt_next = minResRX2FFTTwdlMapping_cnt;
    minResRX2FFTTwdlMapping_maxCnt_next = minResRX2FFTTwdlMapping_maxCnt;
    minResRX2FFTTwdlMapping_dvldReg2_next = minResRX2FFTTwdlMapping_dvldReg1;
    minResRX2FFTTwdlMapping_dvldReg1_next = dMemOutDly_vld;
    case ( minResRX2FFTTwdlMapping_twdlAddr_raw)
      9'b001000000 :
        begin
          minResRX2FFTTwdlMapping_octant = 3'b000;
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b1;
        end
      9'b010000000 :
        begin
          minResRX2FFTTwdlMapping_octant = 3'b001;
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b0;
        end
      9'b011000000 :
        begin
          minResRX2FFTTwdlMapping_octant = 3'b010;
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b1;
        end
      9'b100000000 :
        begin
          minResRX2FFTTwdlMapping_octant = 3'b011;
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b0;
        end
      9'b101000000 :
        begin
          minResRX2FFTTwdlMapping_octant = 3'b100;
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b1;
        end
      default :
        begin
          minResRX2FFTTwdlMapping_octant = minResRX2FFTTwdlMapping_twdlAddr_raw[8:6];
          minResRX2FFTTwdlMapping_twdl45Reg_next = 1'b0;
        end
    endcase
    minResRX2FFTTwdlMapping_octantReg1_next = minResRX2FFTTwdlMapping_octant;
    case ( minResRX2FFTTwdlMapping_octant)
      3'b000 :
        begin
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_twdlAddr_raw[5:0];
        end
      3'b001 :
        begin
          minResRX2FFTTwdlMapping_t_1 = {2'b0, minResRX2FFTTwdlMapping_twdlAddr_raw};
          minResRX2FFTTwdlMapping_sub_temp_0 = 11'sb00010000000 - minResRX2FFTTwdlMapping_t_1;
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_sub_temp_0[5:0];
        end
      3'b010 :
        begin
          minResRX2FFTTwdlMapping_t_2_0 = {2'b0, minResRX2FFTTwdlMapping_twdlAddr_raw};
          minResRX2FFTTwdlMapping_sub_temp_1 = minResRX2FFTTwdlMapping_t_2_0 - 11'sb00010000000;
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_sub_temp_1[5:0];
        end
      3'b011 :
        begin
          minResRX2FFTTwdlMapping_sub_cast_0 = {5'b0, {minResRX2FFTTwdlMapping_twdlAddr_raw, 6'b000000}};
          minResRX2FFTTwdlMapping_sub_temp_2 = 20'sb00000100000000000000 - minResRX2FFTTwdlMapping_sub_cast_0;
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_sub_temp_2[11:6];
        end
      3'b100 :
        begin
          minResRX2FFTTwdlMapping_sub_cast_1 = {5'b0, {minResRX2FFTTwdlMapping_twdlAddr_raw, 6'b000000}};
          minResRX2FFTTwdlMapping_sub_temp_3 = minResRX2FFTTwdlMapping_sub_cast_1 - 20'sb00000100000000000000;
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_sub_temp_3[11:6];
        end
      default :
        begin
          minResRX2FFTTwdlMapping_sub_cast = {5'b0, {minResRX2FFTTwdlMapping_twdlAddr_raw, 6'b000000}};
          minResRX2FFTTwdlMapping_sub_temp = 20'sb00000110000000000000 - minResRX2FFTTwdlMapping_sub_cast;
          minResRX2FFTTwdlMapping_twdlAddrMap_next = minResRX2FFTTwdlMapping_sub_temp[11:6];
        end
    endcase
    minResRX2FFTTwdlMapping_t_0_0 = {minResRX2FFTTwdlMapping_baseAddr[0], minResRX2FFTTwdlMapping_baseAddr[1], minResRX2FFTTwdlMapping_baseAddr[2], minResRX2FFTTwdlMapping_baseAddr[3], minResRX2FFTTwdlMapping_baseAddr[4], minResRX2FFTTwdlMapping_baseAddr[5], minResRX2FFTTwdlMapping_baseAddr[6], minResRX2FFTTwdlMapping_baseAddr[7]};
    minResRX2FFTTwdlMapping_twdlAddr_raw_next = {1'b0, minResRX2FFTTwdlMapping_t_0_0};
    if ( ! initIC) begin
      if (dMemOutDly_vld && (minResRX2FFTTwdlMapping_cnt == 8'b00000000)) begin
        minResRX2FFTTwdlMapping_baseAddr_next = minResRX2FFTTwdlMapping_baseAddr + 8'b00000001;
      end
    end
    else begin
      minResRX2FFTTwdlMapping_baseAddr_next = 8'b00000000;
    end
    if ( ! initIC) begin
      if (dMemOutDly_vld) begin
        if (minResRX2FFTTwdlMapping_cnt == 8'b00000000) begin
          minResRX2FFTTwdlMapping_cnt_next = minResRX2FFTTwdlMapping_maxCnt;
        end
        else begin
          minResRX2FFTTwdlMapping_cnt_next = minResRX2FFTTwdlMapping_cnt - 8'b00000001;
        end
      end
    end
    else if (stage == 4'b0000) begin
      minResRX2FFTTwdlMapping_maxCnt_next = 8'b11111111;
      minResRX2FFTTwdlMapping_cnt_next = 8'b11111111;
    end
    else begin
      minResRX2FFTTwdlMapping_cnt_next = minResRX2FFTTwdlMapping_maxCnt >> 8'd1;
      minResRX2FFTTwdlMapping_maxCnt_next = minResRX2FFTTwdlMapping_maxCnt >> 8'd1;
    end
    twdlAddr = minResRX2FFTTwdlMapping_twdlAddrMap;
    twdlAddrVld = minResRX2FFTTwdlMapping_dvldReg2;
    twdlOctant = minResRX2FFTTwdlMapping_octantReg1;
    twdl45 = minResRX2FFTTwdlMapping_twdl45Reg;
  end



  // Twiddle ROM1
  assign Twiddle_re_table_data[0] = 25'sb0100000000000000000000000;
  assign Twiddle_re_table_data[1] = 25'sb0011111111111110110001000;
  assign Twiddle_re_table_data[2] = 25'sb0011111111111011000100010;
  assign Twiddle_re_table_data[3] = 25'sb0011111111110100111001100;
  assign Twiddle_re_table_data[4] = 25'sb0011111111101100010001000;
  assign Twiddle_re_table_data[5] = 25'sb0011111111100001001010110;
  assign Twiddle_re_table_data[6] = 25'sb0011111111010011100110111;
  assign Twiddle_re_table_data[7] = 25'sb0011111111000011100101100;
  assign Twiddle_re_table_data[8] = 25'sb0011111110110001000110111;
  assign Twiddle_re_table_data[9] = 25'sb0011111110011100001011000;
  assign Twiddle_re_table_data[10] = 25'sb0011111110000100110010010;
  assign Twiddle_re_table_data[11] = 25'sb0011111101101010111100110;
  assign Twiddle_re_table_data[12] = 25'sb0011111101001110101010110;
  assign Twiddle_re_table_data[13] = 25'sb0011111100101111111100101;
  assign Twiddle_re_table_data[14] = 25'sb0011111100001110110010100;
  assign Twiddle_re_table_data[15] = 25'sb0011111011101011001100111;
  assign Twiddle_re_table_data[16] = 25'sb0011111011000101001011111;
  assign Twiddle_re_table_data[17] = 25'sb0011111010011100110000001;
  assign Twiddle_re_table_data[18] = 25'sb0011111001110001111001111;
  assign Twiddle_re_table_data[19] = 25'sb0011111001000100101001100;
  assign Twiddle_re_table_data[20] = 25'sb0011111000010100111111100;
  assign Twiddle_re_table_data[21] = 25'sb0011110111100010111100011;
  assign Twiddle_re_table_data[22] = 25'sb0011110110101110100000100;
  assign Twiddle_re_table_data[23] = 25'sb0011110101110111101100011;
  assign Twiddle_re_table_data[24] = 25'sb0011110100111110100000101;
  assign Twiddle_re_table_data[25] = 25'sb0011110100000010111101111;
  assign Twiddle_re_table_data[26] = 25'sb0011110011000101000100100;
  assign Twiddle_re_table_data[27] = 25'sb0011110010000100110101001;
  assign Twiddle_re_table_data[28] = 25'sb0011110001000010010000100;
  assign Twiddle_re_table_data[29] = 25'sb0011101111111101010111010;
  assign Twiddle_re_table_data[30] = 25'sb0011101110110110001001111;
  assign Twiddle_re_table_data[31] = 25'sb0011101101101100101001010;
  assign Twiddle_re_table_data[32] = 25'sb0011101100100000110101111;
  assign Twiddle_re_table_data[33] = 25'sb0011101011010010110000110;
  assign Twiddle_re_table_data[34] = 25'sb0011101010000010011010011;
  assign Twiddle_re_table_data[35] = 25'sb0011101000101111110011110;
  assign Twiddle_re_table_data[36] = 25'sb0011100111011010111101100;
  assign Twiddle_re_table_data[37] = 25'sb0011100110000011111000100;
  assign Twiddle_re_table_data[38] = 25'sb0011100100101010100101101;
  assign Twiddle_re_table_data[39] = 25'sb0011100011001111000101101;
  assign Twiddle_re_table_data[40] = 25'sb0011100001110001011001100;
  assign Twiddle_re_table_data[41] = 25'sb0011100000010001100010001;
  assign Twiddle_re_table_data[42] = 25'sb0011011110101111100000011;
  assign Twiddle_re_table_data[43] = 25'sb0011011101001011010101010;
  assign Twiddle_re_table_data[44] = 25'sb0011011011100101000001101;
  assign Twiddle_re_table_data[45] = 25'sb0011011001111100100110101;
  assign Twiddle_re_table_data[46] = 25'sb0011011000010010000101001;
  assign Twiddle_re_table_data[47] = 25'sb0011010110100101011110010;
  assign Twiddle_re_table_data[48] = 25'sb0011010100110110110011001;
  assign Twiddle_re_table_data[49] = 25'sb0011010011000110000100100;
  assign Twiddle_re_table_data[50] = 25'sb0011010001010011010011111;
  assign Twiddle_re_table_data[51] = 25'sb0011001111011110100010000;
  assign Twiddle_re_table_data[52] = 25'sb0011001101100111110000001;
  assign Twiddle_re_table_data[53] = 25'sb0011001011101110111111100;
  assign Twiddle_re_table_data[54] = 25'sb0011001001110100010001001;
  assign Twiddle_re_table_data[55] = 25'sb0011000111110111100110011;
  assign Twiddle_re_table_data[56] = 25'sb0011000101111001000000010;
  assign Twiddle_re_table_data[57] = 25'sb0011000011111000100000000;
  assign Twiddle_re_table_data[58] = 25'sb0011000001110110000111000;
  assign Twiddle_re_table_data[59] = 25'sb0010111111110001110110100;
  assign Twiddle_re_table_data[60] = 25'sb0010111101101011101111101;
  assign Twiddle_re_table_data[61] = 25'sb0010111011100011110011101;
  assign Twiddle_re_table_data[62] = 25'sb0010111001011010000100001;
  assign Twiddle_re_table_data[63] = 25'sb0010110111001110100010001;
  assign twiddleS_re = Twiddle_re_table_data[twdlAddr];



  always @(posedge clk or posedge reset)
    begin : TWIDDLEROM_RE_process
      if (reset == 1'b1) begin
        twiddleReg_re <= 25'sb0000000000000000000000000;
      end
      else begin
        twiddleReg_re <= twiddleS_re;
      end
    end



  // Twiddle ROM2
  assign Twiddle_im_table_data[0] = 25'sb0000000000000000000000000;
  assign Twiddle_im_table_data[1] = 25'sb1111111100110110111100011;
  assign Twiddle_im_table_data[2] = 25'sb1111111001101101111010101;
  assign Twiddle_im_table_data[3] = 25'sb1111110110100100111100111;
  assign Twiddle_im_table_data[4] = 25'sb1111110011011100000100111;
  assign Twiddle_im_table_data[5] = 25'sb1111110000010011010100100;
  assign Twiddle_im_table_data[6] = 25'sb1111101101001010101110000;
  assign Twiddle_im_table_data[7] = 25'sb1111101010000010010011000;
  assign Twiddle_im_table_data[8] = 25'sb1111100110111010000101101;
  assign Twiddle_im_table_data[9] = 25'sb1111100011110010000111101;
  assign Twiddle_im_table_data[10] = 25'sb1111100000101010011011001;
  assign Twiddle_im_table_data[11] = 25'sb1111011101100011000001111;
  assign Twiddle_im_table_data[12] = 25'sb1111011010011011111110000;
  assign Twiddle_im_table_data[13] = 25'sb1111010111010101010001001;
  assign Twiddle_im_table_data[14] = 25'sb1111010100001110111101100;
  assign Twiddle_im_table_data[15] = 25'sb1111010001001001000100110;
  assign Twiddle_im_table_data[16] = 25'sb1111001110000011101001000;
  assign Twiddle_im_table_data[17] = 25'sb1111001010111110101100000;
  assign Twiddle_im_table_data[18] = 25'sb1111000111111010001111110;
  assign Twiddle_im_table_data[19] = 25'sb1111000100110110010110000;
  assign Twiddle_im_table_data[20] = 25'sb1111000001110011000000111;
  assign Twiddle_im_table_data[21] = 25'sb1110111110110000010010000;
  assign Twiddle_im_table_data[22] = 25'sb1110111011101110001011011;
  assign Twiddle_im_table_data[23] = 25'sb1110111000101100101111000;
  assign Twiddle_im_table_data[24] = 25'sb1110110101101011111110100;
  assign Twiddle_im_table_data[25] = 25'sb1110110010101011111011110;
  assign Twiddle_im_table_data[26] = 25'sb1110101111101100101000111;
  assign Twiddle_im_table_data[27] = 25'sb1110101100101110000111011;
  assign Twiddle_im_table_data[28] = 25'sb1110101001110000011001011;
  assign Twiddle_im_table_data[29] = 25'sb1110100110110011100000100;
  assign Twiddle_im_table_data[30] = 25'sb1110100011110111011110110;
  assign Twiddle_im_table_data[31] = 25'sb1110100000111100010101110;
  assign Twiddle_im_table_data[32] = 25'sb1110011110000010000111011;
  assign Twiddle_im_table_data[33] = 25'sb1110011011001000110101011;
  assign Twiddle_im_table_data[34] = 25'sb1110011000010000100001101;
  assign Twiddle_im_table_data[35] = 25'sb1110010101011001001110000;
  assign Twiddle_im_table_data[36] = 25'sb1110010010100010111100000;
  assign Twiddle_im_table_data[37] = 25'sb1110001111101101101101100;
  assign Twiddle_im_table_data[38] = 25'sb1110001100111001100100011;
  assign Twiddle_im_table_data[39] = 25'sb1110001010000110100010001;
  assign Twiddle_im_table_data[40] = 25'sb1110000111010100101000110;
  assign Twiddle_im_table_data[41] = 25'sb1110000100100011111001101;
  assign Twiddle_im_table_data[42] = 25'sb1110000001110100010110110;
  assign Twiddle_im_table_data[43] = 25'sb1101111111000110000001110;
  assign Twiddle_im_table_data[44] = 25'sb1101111100011000111100010;
  assign Twiddle_im_table_data[45] = 25'sb1101111001101101000111111;
  assign Twiddle_im_table_data[46] = 25'sb1101110111000010100110011;
  assign Twiddle_im_table_data[47] = 25'sb1101110100011001011001010;
  assign Twiddle_im_table_data[48] = 25'sb1101110001110001100010011;
  assign Twiddle_im_table_data[49] = 25'sb1101101111001011000011010;
  assign Twiddle_im_table_data[50] = 25'sb1101101100100101111101011;
  assign Twiddle_im_table_data[51] = 25'sb1101101010000010010010011;
  assign Twiddle_im_table_data[52] = 25'sb1101100111100000000100000;
  assign Twiddle_im_table_data[53] = 25'sb1101100100111111010011101;
  assign Twiddle_im_table_data[54] = 25'sb1101100010100000000010111;
  assign Twiddle_im_table_data[55] = 25'sb1101100000000010010011011;
  assign Twiddle_im_table_data[56] = 25'sb1101011101100110000110011;
  assign Twiddle_im_table_data[57] = 25'sb1101011011001011011101110;
  assign Twiddle_im_table_data[58] = 25'sb1101011000110010011010101;
  assign Twiddle_im_table_data[59] = 25'sb1101010110011010111110110;
  assign Twiddle_im_table_data[60] = 25'sb1101010100000101001011011;
  assign Twiddle_im_table_data[61] = 25'sb1101010001110001000010001;
  assign Twiddle_im_table_data[62] = 25'sb1101001111011110100100011;
  assign Twiddle_im_table_data[63] = 25'sb1101001101001101110011011;
  assign twiddleS_im = Twiddle_im_table_data[twdlAddr];



  always @(posedge clk or posedge reset)
    begin : TWIDDLEROM_IM_process
      if (reset == 1'b1) begin
        twiddleReg_im <= 25'sb0000000000000000000000000;
      end
      else begin
        twiddleReg_im <= twiddleS_im;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        twdlOctantReg <= 3'b000;
      end
      else begin
        twdlOctantReg <= twdlOctant;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        twdl45Reg <= 1'b0;
      end
      else begin
        twdl45Reg <= twdl45;
      end
    end



  // Radix22TwdlOctCorr
  always @(twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re) begin
    Radix22TwdlOctCorr_cast_0 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_2 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_4 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_6 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_8 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_10 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_3 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_9 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_1 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_7 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_cast_5 = 26'sb00000000000000000000000000;
    Radix22TwdlOctCorr_twdlIn_re = twiddleReg_re;
    Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
    if (twdl45Reg) begin
      case ( twdlOctantReg)
        3'b000 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 25'sb0010110101000001001111010;
            Radix22TwdlOctCorr_twdlIn_im = 25'sb1101001010111110110000110;
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 25'sb1101001010111110110000110;
            Radix22TwdlOctCorr_twdlIn_im = 25'sb1101001010111110110000110;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 25'sb1101001010111110110000110;
            Radix22TwdlOctCorr_twdlIn_im = 25'sb0010110101000001001111010;
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = 25'sb0010110101000001001111010;
            Radix22TwdlOctCorr_twdlIn_im = 25'sb1101001010111110110000110;
          end
      endcase
    end
    else begin
      case ( twdlOctantReg)
        3'b000 :
          begin
          end
        3'b001 :
          begin
            Radix22TwdlOctCorr_cast = {twiddleReg_im[24], twiddleReg_im};
            Radix22TwdlOctCorr_cast_0 =  - (Radix22TwdlOctCorr_cast);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_0[24:0];
            Radix22TwdlOctCorr_cast_5 = {twiddleReg_re[24], twiddleReg_re};
            Radix22TwdlOctCorr_cast_6 =  - (Radix22TwdlOctCorr_cast_5);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_6[24:0];
          end
        3'b010 :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_cast_7 = {twiddleReg_re[24], twiddleReg_re};
            Radix22TwdlOctCorr_cast_8 =  - (Radix22TwdlOctCorr_cast_7);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_8[24:0];
          end
        3'b011 :
          begin
            Radix22TwdlOctCorr_cast_1 = {twiddleReg_re[24], twiddleReg_re};
            Radix22TwdlOctCorr_cast_2 =  - (Radix22TwdlOctCorr_cast_1);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_2[24:0];
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_im;
          end
        3'b100 :
          begin
            Radix22TwdlOctCorr_cast_3 = {twiddleReg_re[24], twiddleReg_re};
            Radix22TwdlOctCorr_cast_4 =  - (Radix22TwdlOctCorr_cast_3);
            Radix22TwdlOctCorr_twdlIn_re = Radix22TwdlOctCorr_cast_4[24:0];
            Radix22TwdlOctCorr_cast_9 = {twiddleReg_im[24], twiddleReg_im};
            Radix22TwdlOctCorr_cast_10 =  - (Radix22TwdlOctCorr_cast_9);
            Radix22TwdlOctCorr_twdlIn_im = Radix22TwdlOctCorr_cast_10[24:0];
          end
        default :
          begin
            Radix22TwdlOctCorr_twdlIn_re = twiddleReg_im;
            Radix22TwdlOctCorr_twdlIn_im = twiddleReg_re;
          end
      endcase
    end
    twdl_re_1 = Radix22TwdlOctCorr_twdlIn_re;
    twdl_im_1 = Radix22TwdlOctCorr_twdlIn_im;
  end



  assign twdl_re = twdl_re_1;

  assign twdl_im = twdl_im_1;

endmodule  // TWDLROM

