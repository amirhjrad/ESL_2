// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Burst\MINRESRX2FFT_MEMSEL.v
// Created: 2024-05-11 18:31:33
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MINRESRX2FFT_MEMSEL
// Source Path: FFTHDLOptimizedExample_Burst/FFT Burst/FFT/MINRESRX2FFT_MEMSEL
// Hierarchy Level: 2
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MINRESRX2FFT_MEMSEL
          (clk,
           reset,
           btfOut1_re,
           btfOut1_im,
           btfOut2_re,
           btfOut2_im,
           btfOut_vld,
           stage,
           initIC,
           stgOut1_re,
           stgOut1_im,
           stgOut2_re,
           stgOut2_im,
           stgOut_vld);


  input   clk;
  input   reset;
  input   signed [24:0] btfOut1_re;  // sfix25_En13
  input   signed [24:0] btfOut1_im;  // sfix25_En13
  input   signed [24:0] btfOut2_re;  // sfix25_En13
  input   signed [24:0] btfOut2_im;  // sfix25_En13
  input   btfOut_vld;
  input   [3:0] stage;  // ufix4
  input   initIC;
  output  signed [24:0] stgOut1_re;  // sfix25_En13
  output  signed [24:0] stgOut1_im;  // sfix25_En13
  output  signed [24:0] stgOut2_re;  // sfix25_En13
  output  signed [24:0] stgOut2_im;  // sfix25_En13
  output  stgOut_vld;


  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut1Reg_re;  // sfix25
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut1Reg_im;  // sfix25
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut2Reg_re;  // sfix25
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut2Reg_im;  // sfix25
  reg  MINRESRX2FFTMEMSEL_stgOutReg_vld;
  reg [7:0] MINRESRX2FFTMEMSEL_cnt;  // ufix8
  reg [7:0] MINRESRX2FFTMEMSEL_cntMax;  // ufix8
  reg  MINRESRX2FFTMEMSEL_muxSel;
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut1Reg_re_next;  // sfix25_En13
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut1Reg_im_next;  // sfix25_En13
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut2Reg_re_next;  // sfix25_En13
  reg signed [24:0] MINRESRX2FFTMEMSEL_stgOut2Reg_im_next;  // sfix25_En13
  reg  MINRESRX2FFTMEMSEL_stgOutReg_vld_next;
  reg [7:0] MINRESRX2FFTMEMSEL_cnt_next;  // ufix8
  reg [7:0] MINRESRX2FFTMEMSEL_cntMax_next;  // ufix8
  reg  MINRESRX2FFTMEMSEL_muxSel_next;
  reg signed [24:0] stgOut1_re_1;  // sfix25_En13
  reg signed [24:0] stgOut1_im_1;  // sfix25_En13
  reg signed [24:0] stgOut2_re_1;  // sfix25_En13
  reg signed [24:0] stgOut2_im_1;  // sfix25_En13
  reg  stgOut_vld_1;


  // MINRESRX2FFTMEMSEL
  always @(posedge clk or posedge reset)
    begin : MINRESRX2FFTMEMSEL_process
      if (reset == 1'b1) begin
        MINRESRX2FFTMEMSEL_stgOut1Reg_re <= 25'sb0000000000000000000000000;
        MINRESRX2FFTMEMSEL_stgOut1Reg_im <= 25'sb0000000000000000000000000;
        MINRESRX2FFTMEMSEL_stgOut2Reg_re <= 25'sb0000000000000000000000000;
        MINRESRX2FFTMEMSEL_stgOut2Reg_im <= 25'sb0000000000000000000000000;
        MINRESRX2FFTMEMSEL_cnt <= 8'b00000000;
        MINRESRX2FFTMEMSEL_cntMax <= 8'b00000000;
        MINRESRX2FFTMEMSEL_muxSel <= 1'b0;
        MINRESRX2FFTMEMSEL_stgOutReg_vld <= 1'b0;
      end
      else begin
        MINRESRX2FFTMEMSEL_stgOut1Reg_re <= MINRESRX2FFTMEMSEL_stgOut1Reg_re_next;
        MINRESRX2FFTMEMSEL_stgOut1Reg_im <= MINRESRX2FFTMEMSEL_stgOut1Reg_im_next;
        MINRESRX2FFTMEMSEL_stgOut2Reg_re <= MINRESRX2FFTMEMSEL_stgOut2Reg_re_next;
        MINRESRX2FFTMEMSEL_stgOut2Reg_im <= MINRESRX2FFTMEMSEL_stgOut2Reg_im_next;
        MINRESRX2FFTMEMSEL_stgOutReg_vld <= MINRESRX2FFTMEMSEL_stgOutReg_vld_next;
        MINRESRX2FFTMEMSEL_cnt <= MINRESRX2FFTMEMSEL_cnt_next;
        MINRESRX2FFTMEMSEL_cntMax <= MINRESRX2FFTMEMSEL_cntMax_next;
        MINRESRX2FFTMEMSEL_muxSel <= MINRESRX2FFTMEMSEL_muxSel_next;
      end
    end

  always @(MINRESRX2FFTMEMSEL_cnt, MINRESRX2FFTMEMSEL_cntMax, MINRESRX2FFTMEMSEL_muxSel,
       MINRESRX2FFTMEMSEL_stgOut1Reg_im, MINRESRX2FFTMEMSEL_stgOut1Reg_re,
       MINRESRX2FFTMEMSEL_stgOut2Reg_im, MINRESRX2FFTMEMSEL_stgOut2Reg_re,
       MINRESRX2FFTMEMSEL_stgOutReg_vld, btfOut1_im, btfOut1_re, btfOut2_im,
       btfOut2_re, btfOut_vld, initIC, stage) begin
    MINRESRX2FFTMEMSEL_cnt_next = MINRESRX2FFTMEMSEL_cnt;
    MINRESRX2FFTMEMSEL_cntMax_next = MINRESRX2FFTMEMSEL_cntMax;
    MINRESRX2FFTMEMSEL_muxSel_next = MINRESRX2FFTMEMSEL_muxSel;
    if (MINRESRX2FFTMEMSEL_muxSel) begin
      MINRESRX2FFTMEMSEL_stgOut1Reg_re_next = btfOut2_re;
      MINRESRX2FFTMEMSEL_stgOut1Reg_im_next = btfOut2_im;
      MINRESRX2FFTMEMSEL_stgOut2Reg_re_next = btfOut1_re;
      MINRESRX2FFTMEMSEL_stgOut2Reg_im_next = btfOut1_im;
    end
    else begin
      MINRESRX2FFTMEMSEL_stgOut1Reg_re_next = btfOut1_re;
      MINRESRX2FFTMEMSEL_stgOut1Reg_im_next = btfOut1_im;
      MINRESRX2FFTMEMSEL_stgOut2Reg_re_next = btfOut2_re;
      MINRESRX2FFTMEMSEL_stgOut2Reg_im_next = btfOut2_im;
    end
    if (initIC) begin
      MINRESRX2FFTMEMSEL_cnt_next = 8'b00000000;
      MINRESRX2FFTMEMSEL_muxSel_next = 1'b0;
      case ( stage)
        4'b0000 :
          begin
            MINRESRX2FFTMEMSEL_cntMax_next = 8'b01111111;
          end
        4'b1000 :
          begin
            MINRESRX2FFTMEMSEL_cntMax_next = 8'b11111111;
          end
        default :
          begin
            MINRESRX2FFTMEMSEL_cntMax_next = MINRESRX2FFTMEMSEL_cntMax >> 8'd1;
          end
      endcase
    end
    else if (btfOut_vld) begin
      if (MINRESRX2FFTMEMSEL_cnt == MINRESRX2FFTMEMSEL_cntMax) begin
        MINRESRX2FFTMEMSEL_cnt_next = 8'b00000000;
        MINRESRX2FFTMEMSEL_muxSel_next =  ! MINRESRX2FFTMEMSEL_muxSel;
      end
      else begin
        MINRESRX2FFTMEMSEL_cnt_next = MINRESRX2FFTMEMSEL_cnt + 8'b00000001;
      end
    end
    MINRESRX2FFTMEMSEL_stgOutReg_vld_next = btfOut_vld;
    stgOut1_re_1 = MINRESRX2FFTMEMSEL_stgOut1Reg_re;
    stgOut1_im_1 = MINRESRX2FFTMEMSEL_stgOut1Reg_im;
    stgOut2_re_1 = MINRESRX2FFTMEMSEL_stgOut2Reg_re;
    stgOut2_im_1 = MINRESRX2FFTMEMSEL_stgOut2Reg_im;
    stgOut_vld_1 = MINRESRX2FFTMEMSEL_stgOutReg_vld;
  end



  assign stgOut1_re = stgOut1_re_1;

  assign stgOut1_im = stgOut1_im_1;

  assign stgOut2_re = stgOut2_re_1;

  assign stgOut2_im = stgOut2_im_1;

  assign stgOut_vld = stgOut_vld_1;

endmodule  // MINRESRX2FFT_MEMSEL

