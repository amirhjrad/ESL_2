// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Streaming\FFT.v
// Created: 2024-05-11 19:34:43
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FFT
// Source Path: FFTHDLOptimizedExample_Streaming/FFT Streaming/FFT
// Hierarchy Level: 1
// Model version: 8.0
// 
// FFT
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FFT
          (clk,
           reset,
           dataIn_re_0,
           dataIn_re_1,
           dataIn_re_2,
           dataIn_re_3,
           dataIn_re_4,
           dataIn_re_5,
           dataIn_re_6,
           dataIn_re_7,
           dataIn_im_0,
           dataIn_im_1,
           dataIn_im_2,
           dataIn_im_3,
           dataIn_im_4,
           dataIn_im_5,
           dataIn_im_6,
           dataIn_im_7,
           validIn,
           dataOut_re_0,
           dataOut_re_1,
           dataOut_re_2,
           dataOut_re_3,
           dataOut_re_4,
           dataOut_re_5,
           dataOut_re_6,
           dataOut_re_7,
           dataOut_im_0,
           dataOut_im_1,
           dataOut_im_2,
           dataOut_im_3,
           dataOut_im_4,
           dataOut_im_5,
           dataOut_im_6,
           dataOut_im_7,
           validOut);


  input   clk;
  input   reset;
  input   signed [15:0] dataIn_re_0;  // sfix16_En13
  input   signed [15:0] dataIn_re_1;  // sfix16_En13
  input   signed [15:0] dataIn_re_2;  // sfix16_En13
  input   signed [15:0] dataIn_re_3;  // sfix16_En13
  input   signed [15:0] dataIn_re_4;  // sfix16_En13
  input   signed [15:0] dataIn_re_5;  // sfix16_En13
  input   signed [15:0] dataIn_re_6;  // sfix16_En13
  input   signed [15:0] dataIn_re_7;  // sfix16_En13
  input   signed [15:0] dataIn_im_0;  // sfix16_En13
  input   signed [15:0] dataIn_im_1;  // sfix16_En13
  input   signed [15:0] dataIn_im_2;  // sfix16_En13
  input   signed [15:0] dataIn_im_3;  // sfix16_En13
  input   signed [15:0] dataIn_im_4;  // sfix16_En13
  input   signed [15:0] dataIn_im_5;  // sfix16_En13
  input   signed [15:0] dataIn_im_6;  // sfix16_En13
  input   signed [15:0] dataIn_im_7;  // sfix16_En13
  input   validIn;
  output  signed [24:0] dataOut_re_0;  // sfix25_En13
  output  signed [24:0] dataOut_re_1;  // sfix25_En13
  output  signed [24:0] dataOut_re_2;  // sfix25_En13
  output  signed [24:0] dataOut_re_3;  // sfix25_En13
  output  signed [24:0] dataOut_re_4;  // sfix25_En13
  output  signed [24:0] dataOut_re_5;  // sfix25_En13
  output  signed [24:0] dataOut_re_6;  // sfix25_En13
  output  signed [24:0] dataOut_re_7;  // sfix25_En13
  output  signed [24:0] dataOut_im_0;  // sfix25_En13
  output  signed [24:0] dataOut_im_1;  // sfix25_En13
  output  signed [24:0] dataOut_im_2;  // sfix25_En13
  output  signed [24:0] dataOut_im_3;  // sfix25_En13
  output  signed [24:0] dataOut_im_4;  // sfix25_En13
  output  signed [24:0] dataOut_im_5;  // sfix25_En13
  output  signed [24:0] dataOut_im_6;  // sfix25_En13
  output  signed [24:0] dataOut_im_7;  // sfix25_En13
  output  validOut;


  wire rotate_1;  // ufix1
  wire softReset;
  reg signed [15:0] intdelay_reg [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_1_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_1 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_1 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_1_im_dly;  // sfix16_En13
  reg  [2:0] intdelay_reg_2;  // ufix1 [3]
  wire din_1_vld_dly;
  wire dinXTwdl_1_1_vld;
  wire [4:0] rd_1_Addr;  // ufix5
  wire rd_1_Enb;
  wire proc_1_enb;
  wire signed [16:0] dout_1_1_re;  // sfix17_En13
  wire signed [16:0] dout_1_1_im;  // sfix17_En13
  wire dout_1_1_vld;
  wire dinXTwdl_2_1_vld;
  wire [3:0] rd_2_Addr;  // ufix4
  wire rd_2_Enb;
  wire proc_2_enb;
  wire multiply_2_J;
  wire signed [17:0] dout_2_1_re;  // sfix18_En13
  wire signed [17:0] dout_2_1_im;  // sfix18_En13
  wire dout_2_1_vld;
  reg signed [17:0] intdelay_reg_3 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_2 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_1_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_4 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_3 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_1_im_dly;  // sfix18_En13
  reg  [2:0] intdelay_reg_5;  // ufix1 [3]
  wire din_3_vld_dly;
  wire signed [15:0] twdl_3_1_re;  // sfix16_En14
  wire signed [15:0] twdl_3_1_im;  // sfix16_En14
  wire dinXTwdl_3_1_vld;
  wire [2:0] rd_3_Addr;  // ufix3
  wire rd_3_Enb;
  wire proc_3_enb;
  wire signed [18:0] dout_3_1_re;  // sfix19_En13
  wire signed [18:0] dout_3_1_im;  // sfix19_En13
  wire dout_3_1_vld;
  wire dinXTwdl_4_1_vld;
  wire [1:0] rd_4_Addr;  // ufix2
  wire rd_4_Enb;
  wire proc_4_enb;
  wire multiply_4_J;
  wire signed [19:0] dout_4_1_re;  // sfix20_En13
  wire signed [19:0] dout_4_1_im;  // sfix20_En13
  wire dout_4_1_vld;
  reg signed [19:0] intdelay_reg_6 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_4 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_1_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_7 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_5 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_1_im_dly;  // sfix20_En13
  reg  [2:0] intdelay_reg_8;  // ufix1 [3]
  wire din_5_vld_dly;
  wire signed [15:0] twdl_5_1_re;  // sfix16_En14
  wire signed [15:0] twdl_5_1_im;  // sfix16_En14
  wire dinXTwdl_5_1_vld;
  wire rd_5_Addr;  // ufix1
  wire rd_5_Enb;
  wire proc_5_enb;
  wire signed [20:0] dout_5_1_re;  // sfix21_En13
  wire signed [20:0] dout_5_1_im;  // sfix21_En13
  wire dout_5_1_vld;
  wire dinXTwdl_6_1_vld;
  wire rd_6_Addr;
  wire rd_6_Enb;
  wire proc_6_enb;
  wire multiply_6_J;
  wire signed [21:0] dout_6_1_re;  // sfix22_En13
  wire signed [21:0] dout_6_1_im;  // sfix22_En13
  wire dout_6_1_vld;
  reg signed [15:0] intdelay_reg_9 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_6 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_2_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_10 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_7 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_2_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_2_re;  // sfix17_En13
  wire signed [16:0] dout_1_2_im;  // sfix17_En13
  wire signed [17:0] dout_2_2_re;  // sfix18_En13
  wire signed [17:0] dout_2_2_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_11 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_8 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_2_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_12 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_9 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_2_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_2_re;  // sfix16_En14
  wire signed [15:0] twdl_3_2_im;  // sfix16_En14
  wire signed [18:0] dout_3_2_re;  // sfix19_En13
  wire signed [18:0] dout_3_2_im;  // sfix19_En13
  wire signed [19:0] dout_4_2_re;  // sfix20_En13
  wire signed [19:0] dout_4_2_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_13 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_10 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_2_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_14 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_11 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_2_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_2_re;  // sfix16_En14
  wire signed [15:0] twdl_5_2_im;  // sfix16_En14
  wire signed [20:0] dout_5_2_re;  // sfix21_En13
  wire signed [20:0] dout_5_2_im;  // sfix21_En13
  wire signed [21:0] dout_6_2_re;  // sfix22_En13
  wire signed [21:0] dout_6_2_im;  // sfix22_En13
  wire signed [15:0] twdl_7_2_re;  // sfix16_En14
  wire signed [15:0] twdl_7_2_im;  // sfix16_En14
  wire signed [22:0] twdlXdin_1_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_1_im;  // sfix23_En13
  wire signed [22:0] twdlXdin_2_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_2_im;  // sfix23_En13
  wire twdlXdin_1_vld;
  reg signed [15:0] intdelay_reg_15 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_12 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_5_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_16 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_13 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_5_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_5_re;  // sfix17_En13
  wire signed [16:0] dout_1_5_im;  // sfix17_En13
  wire signed [17:0] dout_2_5_re;  // sfix18_En13
  wire signed [17:0] dout_2_5_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_17 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_14 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_5_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_18 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_15 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_5_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_5_re;  // sfix16_En14
  wire signed [15:0] twdl_3_5_im;  // sfix16_En14
  wire signed [18:0] dout_3_5_re;  // sfix19_En13
  wire signed [18:0] dout_3_5_im;  // sfix19_En13
  wire signed [19:0] dout_4_5_re;  // sfix20_En13
  wire signed [19:0] dout_4_5_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_19 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_16 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_5_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_20 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_17 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_5_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_5_re;  // sfix16_En14
  wire signed [15:0] twdl_5_5_im;  // sfix16_En14
  wire signed [20:0] dout_5_5_re;  // sfix21_En13
  wire signed [20:0] dout_5_5_im;  // sfix21_En13
  wire signed [21:0] dout_6_5_re;  // sfix22_En13
  wire signed [21:0] dout_6_5_im;  // sfix22_En13
  reg signed [15:0] intdelay_reg_21 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_18 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_6_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_22 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_19 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_6_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_6_re;  // sfix17_En13
  wire signed [16:0] dout_1_6_im;  // sfix17_En13
  wire signed [17:0] dout_2_6_re;  // sfix18_En13
  wire signed [17:0] dout_2_6_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_23 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_20 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_6_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_24 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_21 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_6_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_6_re;  // sfix16_En14
  wire signed [15:0] twdl_3_6_im;  // sfix16_En14
  wire signed [18:0] dout_3_6_re;  // sfix19_En13
  wire signed [18:0] dout_3_6_im;  // sfix19_En13
  wire signed [19:0] dout_4_6_re;  // sfix20_En13
  wire signed [19:0] dout_4_6_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_25 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_22 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_6_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_26 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_23 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_6_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_6_re;  // sfix16_En14
  wire signed [15:0] twdl_5_6_im;  // sfix16_En14
  wire signed [20:0] dout_5_6_re;  // sfix21_En13
  wire signed [20:0] dout_5_6_im;  // sfix21_En13
  wire signed [21:0] dout_6_6_re;  // sfix22_En13
  wire signed [21:0] dout_6_6_im;  // sfix22_En13
  wire signed [15:0] twdl_7_5_re;  // sfix16_En14
  wire signed [15:0] twdl_7_5_im;  // sfix16_En14
  wire signed [15:0] twdl_7_6_re;  // sfix16_En14
  wire signed [15:0] twdl_7_6_im;  // sfix16_En14
  wire signed [22:0] twdlXdin_5_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_5_im;  // sfix23_En13
  wire signed [22:0] twdlXdin_6_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_6_im;  // sfix23_En13
  wire signed [22:0] dout_1_re;  // sfix23_En13
  wire signed [22:0] dout_1_im;  // sfix23_En13
  wire signed [22:0] dout_2_re;  // sfix23_En13
  wire signed [22:0] dout_2_im;  // sfix23_En13
  wire dout_1_vld;
  reg signed [15:0] intdelay_reg_27 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_24 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_3_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_28 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_25 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_3_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_3_re;  // sfix17_En13
  wire signed [16:0] dout_1_3_im;  // sfix17_En13
  wire signed [17:0] dout_2_3_re;  // sfix18_En13
  wire signed [17:0] dout_2_3_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_29 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_26 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_3_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_30 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_27 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_3_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_3_re;  // sfix16_En14
  wire signed [15:0] twdl_3_3_im;  // sfix16_En14
  wire signed [18:0] dout_3_3_re;  // sfix19_En13
  wire signed [18:0] dout_3_3_im;  // sfix19_En13
  wire signed [19:0] dout_4_3_re;  // sfix20_En13
  wire signed [19:0] dout_4_3_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_31 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_28 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_3_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_32 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_29 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_3_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_3_re;  // sfix16_En14
  wire signed [15:0] twdl_5_3_im;  // sfix16_En14
  wire signed [20:0] dout_5_3_re;  // sfix21_En13
  wire signed [20:0] dout_5_3_im;  // sfix21_En13
  wire signed [21:0] dout_6_3_re;  // sfix22_En13
  wire signed [21:0] dout_6_3_im;  // sfix22_En13
  reg signed [15:0] intdelay_reg_33 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_30 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_4_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_34 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_31 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_4_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_4_re;  // sfix17_En13
  wire signed [16:0] dout_1_4_im;  // sfix17_En13
  wire signed [17:0] dout_2_4_re;  // sfix18_En13
  wire signed [17:0] dout_2_4_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_35 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_32 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_4_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_36 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_33 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_4_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_4_re;  // sfix16_En14
  wire signed [15:0] twdl_3_4_im;  // sfix16_En14
  wire signed [18:0] dout_3_4_re;  // sfix19_En13
  wire signed [18:0] dout_3_4_im;  // sfix19_En13
  wire signed [19:0] dout_4_4_re;  // sfix20_En13
  wire signed [19:0] dout_4_4_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_37 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_34 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_4_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_38 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_35 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_4_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_4_re;  // sfix16_En14
  wire signed [15:0] twdl_5_4_im;  // sfix16_En14
  wire signed [20:0] dout_5_4_re;  // sfix21_En13
  wire signed [20:0] dout_5_4_im;  // sfix21_En13
  wire signed [21:0] dout_6_4_re;  // sfix22_En13
  wire signed [21:0] dout_6_4_im;  // sfix22_En13
  wire signed [15:0] twdl_7_3_re;  // sfix16_En14
  wire signed [15:0] twdl_7_3_im;  // sfix16_En14
  wire signed [15:0] twdl_7_4_re;  // sfix16_En14
  wire signed [15:0] twdl_7_4_im;  // sfix16_En14
  wire signed [22:0] twdlXdin_3_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_3_im;  // sfix23_En13
  wire signed [22:0] twdlXdin_4_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_4_im;  // sfix23_En13
  reg signed [15:0] intdelay_reg_39 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_36 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_7_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_40 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_37 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_7_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_7_re;  // sfix17_En13
  wire signed [16:0] dout_1_7_im;  // sfix17_En13
  wire signed [17:0] dout_2_7_re;  // sfix18_En13
  wire signed [17:0] dout_2_7_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_41 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_38 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_7_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_42 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_39 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_7_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_7_re;  // sfix16_En14
  wire signed [15:0] twdl_3_7_im;  // sfix16_En14
  wire signed [18:0] dout_3_7_re;  // sfix19_En13
  wire signed [18:0] dout_3_7_im;  // sfix19_En13
  wire signed [19:0] dout_4_7_re;  // sfix20_En13
  wire signed [19:0] dout_4_7_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_43 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_40 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_7_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_44 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_41 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_7_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_7_re;  // sfix16_En14
  wire signed [15:0] twdl_5_7_im;  // sfix16_En14
  wire signed [20:0] dout_5_7_re;  // sfix21_En13
  wire signed [20:0] dout_5_7_im;  // sfix21_En13
  wire signed [21:0] dout_6_7_re;  // sfix22_En13
  wire signed [21:0] dout_6_7_im;  // sfix22_En13
  reg signed [15:0] intdelay_reg_45 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_42 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_8_re_dly;  // sfix16_En13
  reg signed [15:0] intdelay_reg_46 [0:2];  // sfix16 [3]
  reg signed [15:0] intdelay_reg_next_43 [0:2];  // sfix16_En13 [3]
  reg signed [15:0] din_1_8_im_dly;  // sfix16_En13
  wire signed [16:0] dout_1_8_re;  // sfix17_En13
  wire signed [16:0] dout_1_8_im;  // sfix17_En13
  wire signed [17:0] dout_2_8_re;  // sfix18_En13
  wire signed [17:0] dout_2_8_im;  // sfix18_En13
  reg signed [17:0] intdelay_reg_47 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_44 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_8_re_dly;  // sfix18_En13
  reg signed [17:0] intdelay_reg_48 [0:2];  // sfix18 [3]
  reg signed [17:0] intdelay_reg_next_45 [0:2];  // sfix18_En13 [3]
  reg signed [17:0] din_3_8_im_dly;  // sfix18_En13
  wire signed [15:0] twdl_3_8_re;  // sfix16_En14
  wire signed [15:0] twdl_3_8_im;  // sfix16_En14
  wire signed [18:0] dout_3_8_re;  // sfix19_En13
  wire signed [18:0] dout_3_8_im;  // sfix19_En13
  wire signed [19:0] dout_4_8_re;  // sfix20_En13
  wire signed [19:0] dout_4_8_im;  // sfix20_En13
  reg signed [19:0] intdelay_reg_49 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_46 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_8_re_dly;  // sfix20_En13
  reg signed [19:0] intdelay_reg_50 [0:2];  // sfix20 [3]
  reg signed [19:0] intdelay_reg_next_47 [0:2];  // sfix20_En13 [3]
  reg signed [19:0] din_5_8_im_dly;  // sfix20_En13
  wire signed [15:0] twdl_5_8_re;  // sfix16_En14
  wire signed [15:0] twdl_5_8_im;  // sfix16_En14
  wire signed [20:0] dout_5_8_re;  // sfix21_En13
  wire signed [20:0] dout_5_8_im;  // sfix21_En13
  wire signed [21:0] dout_6_8_re;  // sfix22_En13
  wire signed [21:0] dout_6_8_im;  // sfix22_En13
  wire signed [15:0] twdl_7_7_re;  // sfix16_En14
  wire signed [15:0] twdl_7_7_im;  // sfix16_En14
  wire signed [15:0] twdl_7_8_re;  // sfix16_En14
  wire signed [15:0] twdl_7_8_im;  // sfix16_En14
  wire signed [22:0] twdlXdin_7_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_7_im;  // sfix23_En13
  wire signed [22:0] twdlXdin_8_re;  // sfix23_En13
  wire signed [22:0] twdlXdin_8_im;  // sfix23_En13
  wire signed [22:0] dout_5_re;  // sfix23_En13
  wire signed [22:0] dout_5_im;  // sfix23_En13
  wire signed [22:0] dout_6_re;  // sfix23_En13
  wire signed [22:0] dout_6_im;  // sfix23_En13
  wire signed [23:0] dout_1_re_1;  // sfix24_En13
  wire signed [23:0] dout_1_im_1;  // sfix24_En13
  wire signed [23:0] dout_2_re_1;  // sfix24_En13
  wire signed [23:0] dout_2_im_1;  // sfix24_En13
  wire dout_8_vld;
  wire rotate_3;  // ufix1
  wire signed [22:0] dout_3_re;  // sfix23_En13
  wire signed [22:0] dout_3_im;  // sfix23_En13
  wire signed [22:0] dout_4_re;  // sfix23_En13
  wire signed [22:0] dout_4_im;  // sfix23_En13
  wire signed [22:0] dout_7_re;  // sfix23_En13
  wire signed [22:0] dout_7_im;  // sfix23_En13
  wire signed [22:0] dout_8_re;  // sfix23_En13
  wire signed [22:0] dout_8_im;  // sfix23_En13
  wire signed [23:0] dout_3_re_1;  // sfix24_En13
  wire signed [23:0] dout_3_im_1;  // sfix24_En13
  wire signed [23:0] dout_4_re_1;  // sfix24_En13
  wire signed [23:0] dout_4_im_1;  // sfix24_En13
  wire signed [15:0] twdl_9_2_re;  // sfix16_En14
  wire signed [15:0] twdl_9_2_im;  // sfix16_En14
  wire signed [24:0] dout_1_re_2;  // sfix25_En13
  wire signed [24:0] dout_1_im_2;  // sfix25_En13
  wire signed [24:0] dout_2_re_2;  // sfix25_En13
  wire signed [24:0] dout_2_im_2;  // sfix25_En13
  wire dout_2_vld;
  wire signed [15:0] twdl_9_4_re;  // sfix16_En14
  wire signed [15:0] twdl_9_4_im;  // sfix16_En14
  wire signed [24:0] dout_3_re_2;  // sfix25_En13
  wire signed [24:0] dout_3_im_2;  // sfix25_En13
  wire signed [24:0] dout_4_re_2;  // sfix25_En13
  wire signed [24:0] dout_4_im_2;  // sfix25_En13
  wire rotate_5;  // ufix1
  wire signed [23:0] dout_5_re_1;  // sfix24_En13
  wire signed [23:0] dout_5_im_1;  // sfix24_En13
  wire signed [23:0] dout_6_re_1;  // sfix24_En13
  wire signed [23:0] dout_6_im_1;  // sfix24_En13
  wire rotate_7;  // ufix1
  wire signed [23:0] dout_7_re_1;  // sfix24_En13
  wire signed [23:0] dout_7_im_1;  // sfix24_En13
  wire signed [23:0] dout_8_re_1;  // sfix24_En13
  wire signed [23:0] dout_8_im_1;  // sfix24_En13
  wire signed [15:0] twdl_9_6_re;  // sfix16_En14
  wire signed [15:0] twdl_9_6_im;  // sfix16_En14
  wire signed [24:0] dout_5_re_2;  // sfix25_En13
  wire signed [24:0] dout_5_im_2;  // sfix25_En13
  wire signed [24:0] dout_6_re_2;  // sfix25_En13
  wire signed [24:0] dout_6_im_2;  // sfix25_En13
  wire signed [15:0] twdl_9_8_re;  // sfix16_En14
  wire signed [15:0] twdl_9_8_im;  // sfix16_En14
  wire signed [24:0] dout_7_re_2;  // sfix25_En13
  wire signed [24:0] dout_7_im_2;  // sfix25_En13
  wire signed [24:0] dout_8_re_2;  // sfix25_En13
  wire signed [24:0] dout_8_im_2;  // sfix25_En13
  reg signed [31:0] intdelay_t_0_0;  // int32
  reg signed [31:0] intdelay_t_0_1;  // int32
  reg signed [31:0] intdelay_t_1;  // int32
  reg signed [31:0] intdelay_t_0_01;  // int32
  reg signed [31:0] intdelay_t_0_02;  // int32
  reg signed [31:0] intdelay_t_0_1_1;  // int32
  reg signed [31:0] intdelay_t_1_1;  // int32
  reg signed [31:0] intdelay_t_0_03;  // int32
  reg signed [31:0] intdelay_t_0_1_2;  // int32
  reg signed [31:0] intdelay_t_1_2;  // int32
  reg signed [31:0] intdelay_t_0_04;  // int32
  reg signed [31:0] intdelay_t_0_1_3;  // int32
  reg signed [31:0] intdelay_t_1_3;  // int32
  reg signed [31:0] intdelay_t_0_05;  // int32
  reg signed [31:0] intdelay_t_0_1_4;  // int32
  reg signed [31:0] intdelay_t_1_4;  // int32
  reg signed [31:0] intdelay_t_0_06;  // int32
  reg signed [31:0] intdelay_t_0_1_5;  // int32
  reg signed [31:0] intdelay_t_1_5;  // int32
  reg signed [31:0] intdelay_t_0_07;  // int32
  reg signed [31:0] intdelay_t_0_1_6;  // int32
  reg signed [31:0] intdelay_t_1_6;  // int32
  reg signed [31:0] intdelay_t_0_08;  // int32
  reg signed [31:0] intdelay_t_0_1_7;  // int32
  reg signed [31:0] intdelay_t_1_7;  // int32
  reg signed [31:0] intdelay_t_0_09;  // int32
  reg signed [31:0] intdelay_t_0_1_8;  // int32
  reg signed [31:0] intdelay_t_1_8;  // int32
  reg signed [31:0] intdelay_t_0_010;  // int32
  reg signed [31:0] intdelay_t_0_1_9;  // int32
  reg signed [31:0] intdelay_t_1_9;  // int32
  reg signed [31:0] intdelay_t_0_011;  // int32
  reg signed [31:0] intdelay_t_0_1_10;  // int32
  reg signed [31:0] intdelay_t_1_10;  // int32
  reg signed [31:0] intdelay_t_0_012;  // int32
  reg signed [31:0] intdelay_t_0_1_11;  // int32
  reg signed [31:0] intdelay_t_1_11;  // int32
  reg signed [31:0] intdelay_t_0_013;  // int32
  reg signed [31:0] intdelay_t_0_1_12;  // int32
  reg signed [31:0] intdelay_t_1_12;  // int32
  reg signed [31:0] intdelay_t_0_014;  // int32
  reg signed [31:0] intdelay_t_0_1_13;  // int32
  reg signed [31:0] intdelay_t_1_13;  // int32
  reg signed [31:0] intdelay_t_0_015;  // int32
  reg signed [31:0] intdelay_t_0_1_14;  // int32
  reg signed [31:0] intdelay_t_1_14;  // int32
  reg signed [31:0] intdelay_t_0_016;  // int32
  reg signed [31:0] intdelay_t_0_1_15;  // int32
  reg signed [31:0] intdelay_t_1_15;  // int32
  reg signed [31:0] intdelay_t_0_017;  // int32
  reg signed [31:0] intdelay_t_0_1_16;  // int32
  reg signed [31:0] intdelay_t_1_16;  // int32
  reg signed [31:0] intdelay_t_0_018;  // int32
  reg signed [31:0] intdelay_t_0_1_17;  // int32
  reg signed [31:0] intdelay_t_1_17;  // int32
  reg signed [31:0] intdelay_t_0_019;  // int32
  reg signed [31:0] intdelay_t_0_1_18;  // int32
  reg signed [31:0] intdelay_t_1_18;  // int32
  reg signed [31:0] intdelay_t_0_020;  // int32
  reg signed [31:0] intdelay_t_0_1_19;  // int32
  reg signed [31:0] intdelay_t_1_19;  // int32
  reg signed [31:0] intdelay_t_0_021;  // int32
  reg signed [31:0] intdelay_t_0_1_20;  // int32
  reg signed [31:0] intdelay_t_1_20;  // int32
  reg signed [31:0] intdelay_t_0_022;  // int32
  reg signed [31:0] intdelay_t_0_1_21;  // int32
  reg signed [31:0] intdelay_t_1_21;  // int32
  reg signed [31:0] intdelay_t_0_023;  // int32
  reg signed [31:0] intdelay_t_0_1_22;  // int32
  reg signed [31:0] intdelay_t_1_22;  // int32
  reg signed [31:0] intdelay_t_0_024;  // int32
  reg signed [31:0] intdelay_t_0_1_23;  // int32
  reg signed [31:0] intdelay_t_1_23;  // int32
  reg signed [31:0] intdelay_t_0_025;  // int32
  reg signed [31:0] intdelay_t_0_1_24;  // int32
  reg signed [31:0] intdelay_t_1_24;  // int32
  reg signed [31:0] intdelay_t_0_026;  // int32
  reg signed [31:0] intdelay_t_0_1_25;  // int32
  reg signed [31:0] intdelay_t_1_25;  // int32
  reg signed [31:0] intdelay_t_0_027;  // int32
  reg signed [31:0] intdelay_t_0_1_26;  // int32
  reg signed [31:0] intdelay_t_1_26;  // int32
  reg signed [31:0] intdelay_t_0_028;  // int32
  reg signed [31:0] intdelay_t_0_1_27;  // int32
  reg signed [31:0] intdelay_t_1_27;  // int32
  reg signed [31:0] intdelay_t_0_029;  // int32
  reg signed [31:0] intdelay_t_0_1_28;  // int32
  reg signed [31:0] intdelay_t_1_28;  // int32
  reg signed [31:0] intdelay_t_0_030;  // int32
  reg signed [31:0] intdelay_t_0_1_29;  // int32
  reg signed [31:0] intdelay_t_1_29;  // int32
  reg signed [31:0] intdelay_t_0_031;  // int32
  reg signed [31:0] intdelay_t_0_1_30;  // int32
  reg signed [31:0] intdelay_t_1_30;  // int32
  reg signed [31:0] intdelay_t_0_032;  // int32
  reg signed [31:0] intdelay_t_0_1_31;  // int32
  reg signed [31:0] intdelay_t_1_31;  // int32
  reg signed [31:0] intdelay_t_0_033;  // int32
  reg signed [31:0] intdelay_t_0_1_32;  // int32
  reg signed [31:0] intdelay_t_1_32;  // int32
  reg signed [31:0] intdelay_t_0_034;  // int32
  reg signed [31:0] intdelay_t_0_1_33;  // int32
  reg signed [31:0] intdelay_t_1_33;  // int32
  reg signed [31:0] intdelay_t_0_035;  // int32
  reg signed [31:0] intdelay_t_0_1_34;  // int32
  reg signed [31:0] intdelay_t_1_34;  // int32
  reg signed [31:0] intdelay_t_0_036;  // int32
  reg signed [31:0] intdelay_t_0_1_35;  // int32
  reg signed [31:0] intdelay_t_1_35;  // int32
  reg signed [31:0] intdelay_t_0_037;  // int32
  reg signed [31:0] intdelay_t_0_1_36;  // int32
  reg signed [31:0] intdelay_t_1_36;  // int32
  reg signed [31:0] intdelay_t_0_038;  // int32
  reg signed [31:0] intdelay_t_0_1_37;  // int32
  reg signed [31:0] intdelay_t_1_37;  // int32
  reg signed [31:0] intdelay_t_0_039;  // int32
  reg signed [31:0] intdelay_t_0_1_38;  // int32
  reg signed [31:0] intdelay_t_1_38;  // int32
  reg signed [31:0] intdelay_t_0_040;  // int32
  reg signed [31:0] intdelay_t_0_1_39;  // int32
  reg signed [31:0] intdelay_t_1_39;  // int32
  reg signed [31:0] intdelay_t_0_041;  // int32
  reg signed [31:0] intdelay_t_0_1_40;  // int32
  reg signed [31:0] intdelay_t_1_40;  // int32
  reg signed [31:0] intdelay_t_0_042;  // int32
  reg signed [31:0] intdelay_t_0_1_41;  // int32
  reg signed [31:0] intdelay_t_1_41;  // int32
  reg signed [31:0] intdelay_t_0_043;  // int32
  reg signed [31:0] intdelay_t_0_1_42;  // int32
  reg signed [31:0] intdelay_t_1_42;  // int32
  reg signed [31:0] intdelay_t_0_044;  // int32
  reg signed [31:0] intdelay_t_0_1_43;  // int32
  reg signed [31:0] intdelay_t_1_43;  // int32
  reg signed [31:0] intdelay_t_0_045;  // int32
  reg signed [31:0] intdelay_t_0_1_44;  // int32
  reg signed [31:0] intdelay_t_1_44;  // int32
  reg signed [31:0] intdelay_t_0_046;  // int32
  reg signed [31:0] intdelay_t_0_1_45;  // int32
  reg signed [31:0] intdelay_t_1_45;  // int32
  reg signed [31:0] intdelay_t_0_047;  // int32
  reg signed [31:0] intdelay_t_0_1_46;  // int32
  reg signed [31:0] intdelay_t_1_46;  // int32


  assign rotate_1 = 1'b0;



  assign softReset = 1'b0;



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg[intdelay_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
            intdelay_reg[intdelay_t_1] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd2; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
            intdelay_reg[intdelay_t_0_1] <= intdelay_reg_next[intdelay_t_0_1];
          end
        end
      end
    end

  always @* begin
    din_1_1_re_dly = intdelay_reg[2];
    intdelay_reg_next[0] = dataIn_re_0;

    for(intdelay_t_0_0 = 32'sd0; intdelay_t_0_0 <= 32'sd1; intdelay_t_0_0 = intdelay_t_0_0 + 32'sd1) begin
      intdelay_reg_next[intdelay_t_0_0 + 32'sd1] = intdelay_reg[intdelay_t_0_0];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg_1[intdelay_t_1] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd2; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
            intdelay_reg_1[intdelay_t_1] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd2; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
            intdelay_reg_1[intdelay_t_0_1] <= intdelay_reg_next_1[intdelay_t_0_1];
          end
        end
      end
    end

  always @* begin
    din_1_1_im_dly = intdelay_reg_1[2];
    intdelay_reg_next_1[0] = dataIn_im_0;

    for(intdelay_t_0_01 = 32'sd0; intdelay_t_0_01 <= 32'sd1; intdelay_t_0_01 = intdelay_t_0_01 + 32'sd1) begin
      intdelay_reg_next_1[intdelay_t_0_01 + 32'sd1] = intdelay_reg_1[intdelay_t_0_01];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        intdelay_reg_2 <= {3{1'b0}};
      end
      else begin
        if (softReset == 1'b1) begin
          intdelay_reg_2 <= {3{1'b0}};
        end
        else begin
          intdelay_reg_2[0] <= validIn;
          intdelay_reg_2[32'sd2:32'sd1] <= intdelay_reg_2[32'sd1:32'sd0];
        end
      end
    end

  assign din_1_vld_dly = intdelay_reg_2[2];



  RADIX22FFT_CTRL1_1 u_CTRL1_1_8 (.clk(clk),
                                  .reset(reset),
                                  .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld),
                                  .dinXTwdl_1_1_vld_1(dinXTwdl_1_1_vld),
                                  .rd_1_Addr(rd_1_Addr),  // ufix5
                                  .rd_1_Enb(rd_1_Enb),
                                  .proc_1_enb(proc_1_enb)
                                  );

  RADIX22FFT_SDF1_1 u_SDF1_1_1 (.clk(clk),
                                .reset(reset),
                                .din_1_1_re_dly(din_1_1_re_dly),  // sfix16_En13
                                .din_1_1_im_dly(din_1_1_im_dly),  // sfix16_En13
                                .din_1_vld_dly(din_1_vld_dly),
                                .rd_1_Addr(rd_1_Addr),  // ufix5
                                .rd_1_Enb(rd_1_Enb),
                                .proc_1_enb(proc_1_enb),
                                .dout_1_1_re(dout_1_1_re),  // sfix17_En13
                                .dout_1_1_im(dout_1_1_im),  // sfix17_En13
                                .dout_1_1_vld(dout_1_1_vld),
                                .dinXTwdl_1_1_vld(dinXTwdl_1_1_vld)
                                );

  RADIX22FFT_CTRL1_2 u_CTRL2_2_8 (.clk(clk),
                                  .reset(reset),
                                  .dout_1_1_vld(dout_1_1_vld),
                                  .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld),
                                  .rd_2_Addr(rd_2_Addr),  // ufix4
                                  .rd_2_Enb(rd_2_Enb),
                                  .proc_2_enb(proc_2_enb),
                                  .multiply_2_J(multiply_2_J)
                                  );

  RADIX22FFT_SDF2_2 u_SDF2_2_1 (.clk(clk),
                                .reset(reset),
                                .dout_1_1_re(dout_1_1_re),  // sfix17_En13
                                .dout_1_1_im(dout_1_1_im),  // sfix17_En13
                                .dout_1_1_vld(dout_1_1_vld),
                                .rd_2_Addr(rd_2_Addr),  // ufix4
                                .rd_2_Enb(rd_2_Enb),
                                .proc_2_enb(proc_2_enb),
                                .multiply_2_J(multiply_2_J),
                                .dout_2_1_re(dout_2_1_re),  // sfix18_En13
                                .dout_2_1_im(dout_2_1_im),  // sfix18_En13
                                .dout_2_1_vld(dout_2_1_vld),
                                .dinXTwdl_2_1_vld(dinXTwdl_2_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd2; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
          intdelay_reg_3[intdelay_t_1_1] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd2; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
            intdelay_reg_3[intdelay_t_1_1] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_1 = 32'sd0; intdelay_t_0_1_1 <= 32'sd2; intdelay_t_0_1_1 = intdelay_t_0_1_1 + 32'sd1) begin
            intdelay_reg_3[intdelay_t_0_1_1] <= intdelay_reg_next_2[intdelay_t_0_1_1];
          end
        end
      end
    end

  always @* begin
    din_3_1_re_dly = intdelay_reg_3[2];
    intdelay_reg_next_2[0] = dout_2_1_re;

    for(intdelay_t_0_02 = 32'sd0; intdelay_t_0_02 <= 32'sd1; intdelay_t_0_02 = intdelay_t_0_02 + 32'sd1) begin
      intdelay_reg_next_2[intdelay_t_0_02 + 32'sd1] = intdelay_reg_3[intdelay_t_0_02];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd2; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
          intdelay_reg_4[intdelay_t_1_2] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd2; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
            intdelay_reg_4[intdelay_t_1_2] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_2 = 32'sd0; intdelay_t_0_1_2 <= 32'sd2; intdelay_t_0_1_2 = intdelay_t_0_1_2 + 32'sd1) begin
            intdelay_reg_4[intdelay_t_0_1_2] <= intdelay_reg_next_3[intdelay_t_0_1_2];
          end
        end
      end
    end

  always @* begin
    din_3_1_im_dly = intdelay_reg_4[2];
    intdelay_reg_next_3[0] = dout_2_1_im;

    for(intdelay_t_0_03 = 32'sd0; intdelay_t_0_03 <= 32'sd1; intdelay_t_0_03 = intdelay_t_0_03 + 32'sd1) begin
      intdelay_reg_next_3[intdelay_t_0_03 + 32'sd1] = intdelay_reg_4[intdelay_t_0_03];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        intdelay_reg_5 <= {3{1'b0}};
      end
      else begin
        if (softReset == 1'b1) begin
          intdelay_reg_5 <= {3{1'b0}};
        end
        else begin
          intdelay_reg_5[0] <= dout_2_1_vld;
          intdelay_reg_5[32'sd2:32'sd1] <= intdelay_reg_5[32'sd1:32'sd0];
        end
      end
    end

  assign din_3_vld_dly = intdelay_reg_5[2];



  TWDLROM_3_1 u_twdlROM_3_1 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                             .twdl_3_1_im(twdl_3_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_3 u_CTRL1_3_8 (.clk(clk),
                                  .reset(reset),
                                  .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld),
                                  .dinXTwdl_3_1_vld_1(dinXTwdl_3_1_vld),
                                  .rd_3_Addr(rd_3_Addr),  // ufix3
                                  .rd_3_Enb(rd_3_Enb),
                                  .proc_3_enb(proc_3_enb)
                                  );

  RADIX22FFT_SDF1_3 u_SDF1_3_1 (.clk(clk),
                                .reset(reset),
                                .din_3_1_re_dly(din_3_1_re_dly),  // sfix18_En13
                                .din_3_1_im_dly(din_3_1_im_dly),  // sfix18_En13
                                .din_3_vld_dly(din_3_vld_dly),
                                .rd_3_Addr(rd_3_Addr),  // ufix3
                                .rd_3_Enb(rd_3_Enb),
                                .twdl_3_1_re(twdl_3_1_re),  // sfix16_En14
                                .twdl_3_1_im(twdl_3_1_im),  // sfix16_En14
                                .proc_3_enb(proc_3_enb),
                                .dout_3_1_re(dout_3_1_re),  // sfix19_En13
                                .dout_3_1_im(dout_3_1_im),  // sfix19_En13
                                .dout_3_1_vld(dout_3_1_vld),
                                .dinXTwdl_3_1_vld(dinXTwdl_3_1_vld)
                                );

  RADIX22FFT_CTRL1_4 u_CTRL2_4_8 (.clk(clk),
                                  .reset(reset),
                                  .dout_3_1_vld(dout_3_1_vld),
                                  .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld),
                                  .rd_4_Addr(rd_4_Addr),  // ufix2
                                  .rd_4_Enb(rd_4_Enb),
                                  .proc_4_enb(proc_4_enb),
                                  .multiply_4_J(multiply_4_J)
                                  );

  RADIX22FFT_SDF2_4 u_SDF2_4_1 (.clk(clk),
                                .reset(reset),
                                .dout_3_1_re(dout_3_1_re),  // sfix19_En13
                                .dout_3_1_im(dout_3_1_im),  // sfix19_En13
                                .dout_3_1_vld(dout_3_1_vld),
                                .rd_4_Addr(rd_4_Addr),  // ufix2
                                .rd_4_Enb(rd_4_Enb),
                                .proc_4_enb(proc_4_enb),
                                .multiply_4_J(multiply_4_J),
                                .dout_4_1_re(dout_4_1_re),  // sfix20_En13
                                .dout_4_1_im(dout_4_1_im),  // sfix20_En13
                                .dout_4_1_vld(dout_4_1_vld),
                                .dinXTwdl_4_1_vld(dinXTwdl_4_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd2; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
          intdelay_reg_6[intdelay_t_1_3] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_3 = 32'sd0; intdelay_t_1_3 <= 32'sd2; intdelay_t_1_3 = intdelay_t_1_3 + 32'sd1) begin
            intdelay_reg_6[intdelay_t_1_3] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_3 = 32'sd0; intdelay_t_0_1_3 <= 32'sd2; intdelay_t_0_1_3 = intdelay_t_0_1_3 + 32'sd1) begin
            intdelay_reg_6[intdelay_t_0_1_3] <= intdelay_reg_next_4[intdelay_t_0_1_3];
          end
        end
      end
    end

  always @* begin
    din_5_1_re_dly = intdelay_reg_6[2];
    intdelay_reg_next_4[0] = dout_4_1_re;

    for(intdelay_t_0_04 = 32'sd0; intdelay_t_0_04 <= 32'sd1; intdelay_t_0_04 = intdelay_t_0_04 + 32'sd1) begin
      intdelay_reg_next_4[intdelay_t_0_04 + 32'sd1] = intdelay_reg_6[intdelay_t_0_04];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd2; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
          intdelay_reg_7[intdelay_t_1_4] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_4 = 32'sd0; intdelay_t_1_4 <= 32'sd2; intdelay_t_1_4 = intdelay_t_1_4 + 32'sd1) begin
            intdelay_reg_7[intdelay_t_1_4] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_4 = 32'sd0; intdelay_t_0_1_4 <= 32'sd2; intdelay_t_0_1_4 = intdelay_t_0_1_4 + 32'sd1) begin
            intdelay_reg_7[intdelay_t_0_1_4] <= intdelay_reg_next_5[intdelay_t_0_1_4];
          end
        end
      end
    end

  always @* begin
    din_5_1_im_dly = intdelay_reg_7[2];
    intdelay_reg_next_5[0] = dout_4_1_im;

    for(intdelay_t_0_05 = 32'sd0; intdelay_t_0_05 <= 32'sd1; intdelay_t_0_05 = intdelay_t_0_05 + 32'sd1) begin
      intdelay_reg_next_5[intdelay_t_0_05 + 32'sd1] = intdelay_reg_7[intdelay_t_0_05];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        intdelay_reg_8 <= {3{1'b0}};
      end
      else begin
        if (softReset == 1'b1) begin
          intdelay_reg_8 <= {3{1'b0}};
        end
        else begin
          intdelay_reg_8[0] <= dout_4_1_vld;
          intdelay_reg_8[32'sd2:32'sd1] <= intdelay_reg_8[32'sd1:32'sd0];
        end
      end
    end

  assign din_5_vld_dly = intdelay_reg_8[2];



  TWDLROM_5_1 u_twdlROM_5_1 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                             .twdl_5_1_im(twdl_5_1_im)  // sfix16_En14
                             );

  RADIX22FFT_CTRL1_5 u_CTRL1_5_8 (.clk(clk),
                                  .reset(reset),
                                  .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld),
                                  .dinXTwdl_5_1_vld_1(dinXTwdl_5_1_vld),
                                  .rd_5_Addr(rd_5_Addr),  // ufix1
                                  .rd_5_Enb(rd_5_Enb),
                                  .proc_5_enb(proc_5_enb)
                                  );

  RADIX22FFT_SDF1_5 u_SDF1_5_1 (.clk(clk),
                                .reset(reset),
                                .din_5_1_re_dly(din_5_1_re_dly),  // sfix20_En13
                                .din_5_1_im_dly(din_5_1_im_dly),  // sfix20_En13
                                .din_5_vld_dly(din_5_vld_dly),
                                .rd_5_Addr(rd_5_Addr),  // ufix1
                                .rd_5_Enb(rd_5_Enb),
                                .twdl_5_1_re(twdl_5_1_re),  // sfix16_En14
                                .twdl_5_1_im(twdl_5_1_im),  // sfix16_En14
                                .proc_5_enb(proc_5_enb),
                                .dout_5_1_re(dout_5_1_re),  // sfix21_En13
                                .dout_5_1_im(dout_5_1_im),  // sfix21_En13
                                .dout_5_1_vld(dout_5_1_vld),
                                .dinXTwdl_5_1_vld(dinXTwdl_5_1_vld)
                                );

  RADIX22FFT_CTRL1_6 u_CTRL2_6_8 (.clk(clk),
                                  .reset(reset),
                                  .dout_5_1_vld(dout_5_1_vld),
                                  .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld),
                                  .rd_6_Addr(rd_6_Addr),
                                  .rd_6_Enb(rd_6_Enb),
                                  .proc_6_enb(proc_6_enb),
                                  .multiply_6_J(multiply_6_J)
                                  );

  RADIX22FFT_SDF2_6 u_SDF2_6_1 (.clk(clk),
                                .reset(reset),
                                .dout_5_1_re(dout_5_1_re),  // sfix21_En13
                                .dout_5_1_im(dout_5_1_im),  // sfix21_En13
                                .dout_5_1_vld(dout_5_1_vld),
                                .rd_6_Addr(rd_6_Addr),
                                .rd_6_Enb(rd_6_Enb),
                                .proc_6_enb(proc_6_enb),
                                .multiply_6_J(multiply_6_J),
                                .dout_6_1_re(dout_6_1_re),  // sfix22_En13
                                .dout_6_1_im(dout_6_1_im),  // sfix22_En13
                                .dout_6_1_vld(dout_6_1_vld),
                                .dinXTwdl_6_1_vld(dinXTwdl_6_1_vld)
                                );

  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd2; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
          intdelay_reg_9[intdelay_t_1_5] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_5 = 32'sd0; intdelay_t_1_5 <= 32'sd2; intdelay_t_1_5 = intdelay_t_1_5 + 32'sd1) begin
            intdelay_reg_9[intdelay_t_1_5] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_5 = 32'sd0; intdelay_t_0_1_5 <= 32'sd2; intdelay_t_0_1_5 = intdelay_t_0_1_5 + 32'sd1) begin
            intdelay_reg_9[intdelay_t_0_1_5] <= intdelay_reg_next_6[intdelay_t_0_1_5];
          end
        end
      end
    end

  always @* begin
    din_1_2_re_dly = intdelay_reg_9[2];
    intdelay_reg_next_6[0] = dataIn_re_1;

    for(intdelay_t_0_06 = 32'sd0; intdelay_t_0_06 <= 32'sd1; intdelay_t_0_06 = intdelay_t_0_06 + 32'sd1) begin
      intdelay_reg_next_6[intdelay_t_0_06 + 32'sd1] = intdelay_reg_9[intdelay_t_0_06];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd2; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
          intdelay_reg_10[intdelay_t_1_6] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_6 = 32'sd0; intdelay_t_1_6 <= 32'sd2; intdelay_t_1_6 = intdelay_t_1_6 + 32'sd1) begin
            intdelay_reg_10[intdelay_t_1_6] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_6 = 32'sd0; intdelay_t_0_1_6 <= 32'sd2; intdelay_t_0_1_6 = intdelay_t_0_1_6 + 32'sd1) begin
            intdelay_reg_10[intdelay_t_0_1_6] <= intdelay_reg_next_7[intdelay_t_0_1_6];
          end
        end
      end
    end

  always @* begin
    din_1_2_im_dly = intdelay_reg_10[2];
    intdelay_reg_next_7[0] = dataIn_im_1;

    for(intdelay_t_0_07 = 32'sd0; intdelay_t_0_07 <= 32'sd1; intdelay_t_0_07 = intdelay_t_0_07 + 32'sd1) begin
      intdelay_reg_next_7[intdelay_t_0_07 + 32'sd1] = intdelay_reg_10[intdelay_t_0_07];
    end

  end



  RADIX22FFT_SDF1_1_block u_SDF1_1_2 (.clk(clk),
                                      .reset(reset),
                                      .din_1_2_re_dly(din_1_2_re_dly),  // sfix16_En13
                                      .din_1_2_im_dly(din_1_2_im_dly),  // sfix16_En13
                                      .din_1_vld_dly(din_1_vld_dly),
                                      .rd_1_Addr(rd_1_Addr),  // ufix5
                                      .rd_1_Enb(rd_1_Enb),
                                      .proc_1_enb(proc_1_enb),
                                      .dout_1_2_re(dout_1_2_re),  // sfix17_En13
                                      .dout_1_2_im(dout_1_2_im)  // sfix17_En13
                                      );

  RADIX22FFT_SDF2_2_block u_SDF2_2_2 (.clk(clk),
                                      .reset(reset),
                                      .dout_1_2_re(dout_1_2_re),  // sfix17_En13
                                      .dout_1_2_im(dout_1_2_im),  // sfix17_En13
                                      .dout_1_1_vld(dout_1_1_vld),
                                      .rd_2_Addr(rd_2_Addr),  // ufix4
                                      .rd_2_Enb(rd_2_Enb),
                                      .proc_2_enb(proc_2_enb),
                                      .multiply_2_J(multiply_2_J),
                                      .dout_2_2_re(dout_2_2_re),  // sfix18_En13
                                      .dout_2_2_im(dout_2_2_im)  // sfix18_En13
                                      );

  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_7 = 32'sd0; intdelay_t_1_7 <= 32'sd2; intdelay_t_1_7 = intdelay_t_1_7 + 32'sd1) begin
          intdelay_reg_11[intdelay_t_1_7] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_7 = 32'sd0; intdelay_t_1_7 <= 32'sd2; intdelay_t_1_7 = intdelay_t_1_7 + 32'sd1) begin
            intdelay_reg_11[intdelay_t_1_7] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_7 = 32'sd0; intdelay_t_0_1_7 <= 32'sd2; intdelay_t_0_1_7 = intdelay_t_0_1_7 + 32'sd1) begin
            intdelay_reg_11[intdelay_t_0_1_7] <= intdelay_reg_next_8[intdelay_t_0_1_7];
          end
        end
      end
    end

  always @* begin
    din_3_2_re_dly = intdelay_reg_11[2];
    intdelay_reg_next_8[0] = dout_2_2_re;

    for(intdelay_t_0_08 = 32'sd0; intdelay_t_0_08 <= 32'sd1; intdelay_t_0_08 = intdelay_t_0_08 + 32'sd1) begin
      intdelay_reg_next_8[intdelay_t_0_08 + 32'sd1] = intdelay_reg_11[intdelay_t_0_08];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_8 = 32'sd0; intdelay_t_1_8 <= 32'sd2; intdelay_t_1_8 = intdelay_t_1_8 + 32'sd1) begin
          intdelay_reg_12[intdelay_t_1_8] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_8 = 32'sd0; intdelay_t_1_8 <= 32'sd2; intdelay_t_1_8 = intdelay_t_1_8 + 32'sd1) begin
            intdelay_reg_12[intdelay_t_1_8] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_8 = 32'sd0; intdelay_t_0_1_8 <= 32'sd2; intdelay_t_0_1_8 = intdelay_t_0_1_8 + 32'sd1) begin
            intdelay_reg_12[intdelay_t_0_1_8] <= intdelay_reg_next_9[intdelay_t_0_1_8];
          end
        end
      end
    end

  always @* begin
    din_3_2_im_dly = intdelay_reg_12[2];
    intdelay_reg_next_9[0] = dout_2_2_im;

    for(intdelay_t_0_09 = 32'sd0; intdelay_t_0_09 <= 32'sd1; intdelay_t_0_09 = intdelay_t_0_09 + 32'sd1) begin
      intdelay_reg_next_9[intdelay_t_0_09 + 32'sd1] = intdelay_reg_12[intdelay_t_0_09];
    end

  end



  TWDLROM_3_2 u_twdlROM_3_2 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_2_re(twdl_3_2_re),  // sfix16_En14
                             .twdl_3_2_im(twdl_3_2_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block u_SDF1_3_2 (.clk(clk),
                                      .reset(reset),
                                      .din_3_2_re_dly(din_3_2_re_dly),  // sfix18_En13
                                      .din_3_2_im_dly(din_3_2_im_dly),  // sfix18_En13
                                      .din_3_vld_dly(din_3_vld_dly),
                                      .rd_3_Addr(rd_3_Addr),  // ufix3
                                      .rd_3_Enb(rd_3_Enb),
                                      .twdl_3_2_re(twdl_3_2_re),  // sfix16_En14
                                      .twdl_3_2_im(twdl_3_2_im),  // sfix16_En14
                                      .proc_3_enb(proc_3_enb),
                                      .dout_3_2_re(dout_3_2_re),  // sfix19_En13
                                      .dout_3_2_im(dout_3_2_im)  // sfix19_En13
                                      );

  RADIX22FFT_SDF2_4_block u_SDF2_4_2 (.clk(clk),
                                      .reset(reset),
                                      .dout_3_2_re(dout_3_2_re),  // sfix19_En13
                                      .dout_3_2_im(dout_3_2_im),  // sfix19_En13
                                      .dout_3_1_vld(dout_3_1_vld),
                                      .rd_4_Addr(rd_4_Addr),  // ufix2
                                      .rd_4_Enb(rd_4_Enb),
                                      .proc_4_enb(proc_4_enb),
                                      .multiply_4_J(multiply_4_J),
                                      .dout_4_2_re(dout_4_2_re),  // sfix20_En13
                                      .dout_4_2_im(dout_4_2_im)  // sfix20_En13
                                      );

  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_9 = 32'sd0; intdelay_t_1_9 <= 32'sd2; intdelay_t_1_9 = intdelay_t_1_9 + 32'sd1) begin
          intdelay_reg_13[intdelay_t_1_9] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_9 = 32'sd0; intdelay_t_1_9 <= 32'sd2; intdelay_t_1_9 = intdelay_t_1_9 + 32'sd1) begin
            intdelay_reg_13[intdelay_t_1_9] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_9 = 32'sd0; intdelay_t_0_1_9 <= 32'sd2; intdelay_t_0_1_9 = intdelay_t_0_1_9 + 32'sd1) begin
            intdelay_reg_13[intdelay_t_0_1_9] <= intdelay_reg_next_10[intdelay_t_0_1_9];
          end
        end
      end
    end

  always @* begin
    din_5_2_re_dly = intdelay_reg_13[2];
    intdelay_reg_next_10[0] = dout_4_2_re;

    for(intdelay_t_0_010 = 32'sd0; intdelay_t_0_010 <= 32'sd1; intdelay_t_0_010 = intdelay_t_0_010 + 32'sd1) begin
      intdelay_reg_next_10[intdelay_t_0_010 + 32'sd1] = intdelay_reg_13[intdelay_t_0_010];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_10 = 32'sd0; intdelay_t_1_10 <= 32'sd2; intdelay_t_1_10 = intdelay_t_1_10 + 32'sd1) begin
          intdelay_reg_14[intdelay_t_1_10] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_10 = 32'sd0; intdelay_t_1_10 <= 32'sd2; intdelay_t_1_10 = intdelay_t_1_10 + 32'sd1) begin
            intdelay_reg_14[intdelay_t_1_10] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_10 = 32'sd0; intdelay_t_0_1_10 <= 32'sd2; intdelay_t_0_1_10 = intdelay_t_0_1_10 + 32'sd1) begin
            intdelay_reg_14[intdelay_t_0_1_10] <= intdelay_reg_next_11[intdelay_t_0_1_10];
          end
        end
      end
    end

  always @* begin
    din_5_2_im_dly = intdelay_reg_14[2];
    intdelay_reg_next_11[0] = dout_4_2_im;

    for(intdelay_t_0_011 = 32'sd0; intdelay_t_0_011 <= 32'sd1; intdelay_t_0_011 = intdelay_t_0_011 + 32'sd1) begin
      intdelay_reg_next_11[intdelay_t_0_011 + 32'sd1] = intdelay_reg_14[intdelay_t_0_011];
    end

  end



  TWDLROM_5_2 u_twdlROM_5_2 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_2_re(twdl_5_2_re),  // sfix16_En14
                             .twdl_5_2_im(twdl_5_2_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block u_SDF1_5_2 (.clk(clk),
                                      .reset(reset),
                                      .din_5_2_re_dly(din_5_2_re_dly),  // sfix20_En13
                                      .din_5_2_im_dly(din_5_2_im_dly),  // sfix20_En13
                                      .din_5_vld_dly(din_5_vld_dly),
                                      .rd_5_Addr(rd_5_Addr),  // ufix1
                                      .rd_5_Enb(rd_5_Enb),
                                      .twdl_5_2_re(twdl_5_2_re),  // sfix16_En14
                                      .twdl_5_2_im(twdl_5_2_im),  // sfix16_En14
                                      .proc_5_enb(proc_5_enb),
                                      .dout_5_2_re(dout_5_2_re),  // sfix21_En13
                                      .dout_5_2_im(dout_5_2_im)  // sfix21_En13
                                      );

  RADIX22FFT_SDF2_6_block u_SDF2_6_2 (.clk(clk),
                                      .reset(reset),
                                      .dout_5_2_re(dout_5_2_re),  // sfix21_En13
                                      .dout_5_2_im(dout_5_2_im),  // sfix21_En13
                                      .dout_5_1_vld(dout_5_1_vld),
                                      .rd_6_Addr(rd_6_Addr),
                                      .rd_6_Enb(rd_6_Enb),
                                      .proc_6_enb(proc_6_enb),
                                      .multiply_6_J(multiply_6_J),
                                      .dout_6_2_re(dout_6_2_re),  // sfix22_En13
                                      .dout_6_2_im(dout_6_2_im)  // sfix22_En13
                                      );

  TWDLROM_7_2 u_twdlROM_7_2 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_2_re(twdl_7_2_re),  // sfix16_En14
                             .twdl_7_2_im(twdl_7_2_im)  // sfix16_En14
                             );

  TWDLMULT_SDNF1_7 u_TWDLMULT_SDNF1_7_1 (.clk(clk),
                                         .reset(reset),
                                         .dout_6_1_re(dout_6_1_re),  // sfix22_En13
                                         .dout_6_1_im(dout_6_1_im),  // sfix22_En13
                                         .dout_6_2_re(dout_6_2_re),  // sfix22_En13
                                         .dout_6_2_im(dout_6_2_im),  // sfix22_En13
                                         .dout_6_1_vld(dout_6_1_vld),
                                         .twdl_7_2_re(twdl_7_2_re),  // sfix16_En14
                                         .twdl_7_2_im(twdl_7_2_im),  // sfix16_En14
                                         .twdlXdin_1_re(twdlXdin_1_re),  // sfix23_En13
                                         .twdlXdin_1_im(twdlXdin_1_im),  // sfix23_En13
                                         .twdlXdin_2_re(twdlXdin_2_re),  // sfix23_En13
                                         .twdlXdin_2_im(twdlXdin_2_im),  // sfix23_En13
                                         .twdlXdin_1_vld(twdlXdin_1_vld)
                                         );

  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_11 = 32'sd0; intdelay_t_1_11 <= 32'sd2; intdelay_t_1_11 = intdelay_t_1_11 + 32'sd1) begin
          intdelay_reg_15[intdelay_t_1_11] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_11 = 32'sd0; intdelay_t_1_11 <= 32'sd2; intdelay_t_1_11 = intdelay_t_1_11 + 32'sd1) begin
            intdelay_reg_15[intdelay_t_1_11] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_11 = 32'sd0; intdelay_t_0_1_11 <= 32'sd2; intdelay_t_0_1_11 = intdelay_t_0_1_11 + 32'sd1) begin
            intdelay_reg_15[intdelay_t_0_1_11] <= intdelay_reg_next_12[intdelay_t_0_1_11];
          end
        end
      end
    end

  always @* begin
    din_1_5_re_dly = intdelay_reg_15[2];
    intdelay_reg_next_12[0] = dataIn_re_4;

    for(intdelay_t_0_012 = 32'sd0; intdelay_t_0_012 <= 32'sd1; intdelay_t_0_012 = intdelay_t_0_012 + 32'sd1) begin
      intdelay_reg_next_12[intdelay_t_0_012 + 32'sd1] = intdelay_reg_15[intdelay_t_0_012];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_12 = 32'sd0; intdelay_t_1_12 <= 32'sd2; intdelay_t_1_12 = intdelay_t_1_12 + 32'sd1) begin
          intdelay_reg_16[intdelay_t_1_12] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_12 = 32'sd0; intdelay_t_1_12 <= 32'sd2; intdelay_t_1_12 = intdelay_t_1_12 + 32'sd1) begin
            intdelay_reg_16[intdelay_t_1_12] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_12 = 32'sd0; intdelay_t_0_1_12 <= 32'sd2; intdelay_t_0_1_12 = intdelay_t_0_1_12 + 32'sd1) begin
            intdelay_reg_16[intdelay_t_0_1_12] <= intdelay_reg_next_13[intdelay_t_0_1_12];
          end
        end
      end
    end

  always @* begin
    din_1_5_im_dly = intdelay_reg_16[2];
    intdelay_reg_next_13[0] = dataIn_im_4;

    for(intdelay_t_0_013 = 32'sd0; intdelay_t_0_013 <= 32'sd1; intdelay_t_0_013 = intdelay_t_0_013 + 32'sd1) begin
      intdelay_reg_next_13[intdelay_t_0_013 + 32'sd1] = intdelay_reg_16[intdelay_t_0_013];
    end

  end



  RADIX22FFT_SDF1_1_block3 u_SDF1_1_5 (.clk(clk),
                                       .reset(reset),
                                       .din_1_5_re_dly(din_1_5_re_dly),  // sfix16_En13
                                       .din_1_5_im_dly(din_1_5_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_5_re(dout_1_5_re),  // sfix17_En13
                                       .dout_1_5_im(dout_1_5_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block3 u_SDF2_2_5 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_5_re(dout_1_5_re),  // sfix17_En13
                                       .dout_1_5_im(dout_1_5_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_5_re(dout_2_5_re),  // sfix18_En13
                                       .dout_2_5_im(dout_2_5_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_13 = 32'sd0; intdelay_t_1_13 <= 32'sd2; intdelay_t_1_13 = intdelay_t_1_13 + 32'sd1) begin
          intdelay_reg_17[intdelay_t_1_13] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_13 = 32'sd0; intdelay_t_1_13 <= 32'sd2; intdelay_t_1_13 = intdelay_t_1_13 + 32'sd1) begin
            intdelay_reg_17[intdelay_t_1_13] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_13 = 32'sd0; intdelay_t_0_1_13 <= 32'sd2; intdelay_t_0_1_13 = intdelay_t_0_1_13 + 32'sd1) begin
            intdelay_reg_17[intdelay_t_0_1_13] <= intdelay_reg_next_14[intdelay_t_0_1_13];
          end
        end
      end
    end

  always @* begin
    din_3_5_re_dly = intdelay_reg_17[2];
    intdelay_reg_next_14[0] = dout_2_5_re;

    for(intdelay_t_0_014 = 32'sd0; intdelay_t_0_014 <= 32'sd1; intdelay_t_0_014 = intdelay_t_0_014 + 32'sd1) begin
      intdelay_reg_next_14[intdelay_t_0_014 + 32'sd1] = intdelay_reg_17[intdelay_t_0_014];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_14 = 32'sd0; intdelay_t_1_14 <= 32'sd2; intdelay_t_1_14 = intdelay_t_1_14 + 32'sd1) begin
          intdelay_reg_18[intdelay_t_1_14] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_14 = 32'sd0; intdelay_t_1_14 <= 32'sd2; intdelay_t_1_14 = intdelay_t_1_14 + 32'sd1) begin
            intdelay_reg_18[intdelay_t_1_14] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_14 = 32'sd0; intdelay_t_0_1_14 <= 32'sd2; intdelay_t_0_1_14 = intdelay_t_0_1_14 + 32'sd1) begin
            intdelay_reg_18[intdelay_t_0_1_14] <= intdelay_reg_next_15[intdelay_t_0_1_14];
          end
        end
      end
    end

  always @* begin
    din_3_5_im_dly = intdelay_reg_18[2];
    intdelay_reg_next_15[0] = dout_2_5_im;

    for(intdelay_t_0_015 = 32'sd0; intdelay_t_0_015 <= 32'sd1; intdelay_t_0_015 = intdelay_t_0_015 + 32'sd1) begin
      intdelay_reg_next_15[intdelay_t_0_015 + 32'sd1] = intdelay_reg_18[intdelay_t_0_015];
    end

  end



  TWDLROM_3_5 u_twdlROM_3_5 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_5_re(twdl_3_5_re),  // sfix16_En14
                             .twdl_3_5_im(twdl_3_5_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block3 u_SDF1_3_5 (.clk(clk),
                                       .reset(reset),
                                       .din_3_5_re_dly(din_3_5_re_dly),  // sfix18_En13
                                       .din_3_5_im_dly(din_3_5_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_5_re(twdl_3_5_re),  // sfix16_En14
                                       .twdl_3_5_im(twdl_3_5_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_5_re(dout_3_5_re),  // sfix19_En13
                                       .dout_3_5_im(dout_3_5_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block3 u_SDF2_4_5 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_5_re(dout_3_5_re),  // sfix19_En13
                                       .dout_3_5_im(dout_3_5_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_5_re(dout_4_5_re),  // sfix20_En13
                                       .dout_4_5_im(dout_4_5_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_15 = 32'sd0; intdelay_t_1_15 <= 32'sd2; intdelay_t_1_15 = intdelay_t_1_15 + 32'sd1) begin
          intdelay_reg_19[intdelay_t_1_15] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_15 = 32'sd0; intdelay_t_1_15 <= 32'sd2; intdelay_t_1_15 = intdelay_t_1_15 + 32'sd1) begin
            intdelay_reg_19[intdelay_t_1_15] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_15 = 32'sd0; intdelay_t_0_1_15 <= 32'sd2; intdelay_t_0_1_15 = intdelay_t_0_1_15 + 32'sd1) begin
            intdelay_reg_19[intdelay_t_0_1_15] <= intdelay_reg_next_16[intdelay_t_0_1_15];
          end
        end
      end
    end

  always @* begin
    din_5_5_re_dly = intdelay_reg_19[2];
    intdelay_reg_next_16[0] = dout_4_5_re;

    for(intdelay_t_0_016 = 32'sd0; intdelay_t_0_016 <= 32'sd1; intdelay_t_0_016 = intdelay_t_0_016 + 32'sd1) begin
      intdelay_reg_next_16[intdelay_t_0_016 + 32'sd1] = intdelay_reg_19[intdelay_t_0_016];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_16 = 32'sd0; intdelay_t_1_16 <= 32'sd2; intdelay_t_1_16 = intdelay_t_1_16 + 32'sd1) begin
          intdelay_reg_20[intdelay_t_1_16] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_16 = 32'sd0; intdelay_t_1_16 <= 32'sd2; intdelay_t_1_16 = intdelay_t_1_16 + 32'sd1) begin
            intdelay_reg_20[intdelay_t_1_16] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_16 = 32'sd0; intdelay_t_0_1_16 <= 32'sd2; intdelay_t_0_1_16 = intdelay_t_0_1_16 + 32'sd1) begin
            intdelay_reg_20[intdelay_t_0_1_16] <= intdelay_reg_next_17[intdelay_t_0_1_16];
          end
        end
      end
    end

  always @* begin
    din_5_5_im_dly = intdelay_reg_20[2];
    intdelay_reg_next_17[0] = dout_4_5_im;

    for(intdelay_t_0_017 = 32'sd0; intdelay_t_0_017 <= 32'sd1; intdelay_t_0_017 = intdelay_t_0_017 + 32'sd1) begin
      intdelay_reg_next_17[intdelay_t_0_017 + 32'sd1] = intdelay_reg_20[intdelay_t_0_017];
    end

  end



  TWDLROM_5_5 u_twdlROM_5_5 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_5_re(twdl_5_5_re),  // sfix16_En14
                             .twdl_5_5_im(twdl_5_5_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block3 u_SDF1_5_5 (.clk(clk),
                                       .reset(reset),
                                       .din_5_5_re_dly(din_5_5_re_dly),  // sfix20_En13
                                       .din_5_5_im_dly(din_5_5_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_5_re(twdl_5_5_re),  // sfix16_En14
                                       .twdl_5_5_im(twdl_5_5_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_5_re(dout_5_5_re),  // sfix21_En13
                                       .dout_5_5_im(dout_5_5_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block3 u_SDF2_6_5 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_5_re(dout_5_5_re),  // sfix21_En13
                                       .dout_5_5_im(dout_5_5_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_5_re(dout_6_5_re),  // sfix22_En13
                                       .dout_6_5_im(dout_6_5_im)  // sfix22_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_17 = 32'sd0; intdelay_t_1_17 <= 32'sd2; intdelay_t_1_17 = intdelay_t_1_17 + 32'sd1) begin
          intdelay_reg_21[intdelay_t_1_17] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_17 = 32'sd0; intdelay_t_1_17 <= 32'sd2; intdelay_t_1_17 = intdelay_t_1_17 + 32'sd1) begin
            intdelay_reg_21[intdelay_t_1_17] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_17 = 32'sd0; intdelay_t_0_1_17 <= 32'sd2; intdelay_t_0_1_17 = intdelay_t_0_1_17 + 32'sd1) begin
            intdelay_reg_21[intdelay_t_0_1_17] <= intdelay_reg_next_18[intdelay_t_0_1_17];
          end
        end
      end
    end

  always @* begin
    din_1_6_re_dly = intdelay_reg_21[2];
    intdelay_reg_next_18[0] = dataIn_re_5;

    for(intdelay_t_0_018 = 32'sd0; intdelay_t_0_018 <= 32'sd1; intdelay_t_0_018 = intdelay_t_0_018 + 32'sd1) begin
      intdelay_reg_next_18[intdelay_t_0_018 + 32'sd1] = intdelay_reg_21[intdelay_t_0_018];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_18 = 32'sd0; intdelay_t_1_18 <= 32'sd2; intdelay_t_1_18 = intdelay_t_1_18 + 32'sd1) begin
          intdelay_reg_22[intdelay_t_1_18] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_18 = 32'sd0; intdelay_t_1_18 <= 32'sd2; intdelay_t_1_18 = intdelay_t_1_18 + 32'sd1) begin
            intdelay_reg_22[intdelay_t_1_18] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_18 = 32'sd0; intdelay_t_0_1_18 <= 32'sd2; intdelay_t_0_1_18 = intdelay_t_0_1_18 + 32'sd1) begin
            intdelay_reg_22[intdelay_t_0_1_18] <= intdelay_reg_next_19[intdelay_t_0_1_18];
          end
        end
      end
    end

  always @* begin
    din_1_6_im_dly = intdelay_reg_22[2];
    intdelay_reg_next_19[0] = dataIn_im_5;

    for(intdelay_t_0_019 = 32'sd0; intdelay_t_0_019 <= 32'sd1; intdelay_t_0_019 = intdelay_t_0_019 + 32'sd1) begin
      intdelay_reg_next_19[intdelay_t_0_019 + 32'sd1] = intdelay_reg_22[intdelay_t_0_019];
    end

  end



  RADIX22FFT_SDF1_1_block4 u_SDF1_1_6 (.clk(clk),
                                       .reset(reset),
                                       .din_1_6_re_dly(din_1_6_re_dly),  // sfix16_En13
                                       .din_1_6_im_dly(din_1_6_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_6_re(dout_1_6_re),  // sfix17_En13
                                       .dout_1_6_im(dout_1_6_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block4 u_SDF2_2_6 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_6_re(dout_1_6_re),  // sfix17_En13
                                       .dout_1_6_im(dout_1_6_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_6_re(dout_2_6_re),  // sfix18_En13
                                       .dout_2_6_im(dout_2_6_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_19 = 32'sd0; intdelay_t_1_19 <= 32'sd2; intdelay_t_1_19 = intdelay_t_1_19 + 32'sd1) begin
          intdelay_reg_23[intdelay_t_1_19] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_19 = 32'sd0; intdelay_t_1_19 <= 32'sd2; intdelay_t_1_19 = intdelay_t_1_19 + 32'sd1) begin
            intdelay_reg_23[intdelay_t_1_19] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_19 = 32'sd0; intdelay_t_0_1_19 <= 32'sd2; intdelay_t_0_1_19 = intdelay_t_0_1_19 + 32'sd1) begin
            intdelay_reg_23[intdelay_t_0_1_19] <= intdelay_reg_next_20[intdelay_t_0_1_19];
          end
        end
      end
    end

  always @* begin
    din_3_6_re_dly = intdelay_reg_23[2];
    intdelay_reg_next_20[0] = dout_2_6_re;

    for(intdelay_t_0_020 = 32'sd0; intdelay_t_0_020 <= 32'sd1; intdelay_t_0_020 = intdelay_t_0_020 + 32'sd1) begin
      intdelay_reg_next_20[intdelay_t_0_020 + 32'sd1] = intdelay_reg_23[intdelay_t_0_020];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_20 = 32'sd0; intdelay_t_1_20 <= 32'sd2; intdelay_t_1_20 = intdelay_t_1_20 + 32'sd1) begin
          intdelay_reg_24[intdelay_t_1_20] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_20 = 32'sd0; intdelay_t_1_20 <= 32'sd2; intdelay_t_1_20 = intdelay_t_1_20 + 32'sd1) begin
            intdelay_reg_24[intdelay_t_1_20] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_20 = 32'sd0; intdelay_t_0_1_20 <= 32'sd2; intdelay_t_0_1_20 = intdelay_t_0_1_20 + 32'sd1) begin
            intdelay_reg_24[intdelay_t_0_1_20] <= intdelay_reg_next_21[intdelay_t_0_1_20];
          end
        end
      end
    end

  always @* begin
    din_3_6_im_dly = intdelay_reg_24[2];
    intdelay_reg_next_21[0] = dout_2_6_im;

    for(intdelay_t_0_021 = 32'sd0; intdelay_t_0_021 <= 32'sd1; intdelay_t_0_021 = intdelay_t_0_021 + 32'sd1) begin
      intdelay_reg_next_21[intdelay_t_0_021 + 32'sd1] = intdelay_reg_24[intdelay_t_0_021];
    end

  end



  TWDLROM_3_6 u_twdlROM_3_6 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_6_re(twdl_3_6_re),  // sfix16_En14
                             .twdl_3_6_im(twdl_3_6_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block4 u_SDF1_3_6 (.clk(clk),
                                       .reset(reset),
                                       .din_3_6_re_dly(din_3_6_re_dly),  // sfix18_En13
                                       .din_3_6_im_dly(din_3_6_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_6_re(twdl_3_6_re),  // sfix16_En14
                                       .twdl_3_6_im(twdl_3_6_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_6_re(dout_3_6_re),  // sfix19_En13
                                       .dout_3_6_im(dout_3_6_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block4 u_SDF2_4_6 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_6_re(dout_3_6_re),  // sfix19_En13
                                       .dout_3_6_im(dout_3_6_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_6_re(dout_4_6_re),  // sfix20_En13
                                       .dout_4_6_im(dout_4_6_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_21 = 32'sd0; intdelay_t_1_21 <= 32'sd2; intdelay_t_1_21 = intdelay_t_1_21 + 32'sd1) begin
          intdelay_reg_25[intdelay_t_1_21] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_21 = 32'sd0; intdelay_t_1_21 <= 32'sd2; intdelay_t_1_21 = intdelay_t_1_21 + 32'sd1) begin
            intdelay_reg_25[intdelay_t_1_21] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_21 = 32'sd0; intdelay_t_0_1_21 <= 32'sd2; intdelay_t_0_1_21 = intdelay_t_0_1_21 + 32'sd1) begin
            intdelay_reg_25[intdelay_t_0_1_21] <= intdelay_reg_next_22[intdelay_t_0_1_21];
          end
        end
      end
    end

  always @* begin
    din_5_6_re_dly = intdelay_reg_25[2];
    intdelay_reg_next_22[0] = dout_4_6_re;

    for(intdelay_t_0_022 = 32'sd0; intdelay_t_0_022 <= 32'sd1; intdelay_t_0_022 = intdelay_t_0_022 + 32'sd1) begin
      intdelay_reg_next_22[intdelay_t_0_022 + 32'sd1] = intdelay_reg_25[intdelay_t_0_022];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_22 = 32'sd0; intdelay_t_1_22 <= 32'sd2; intdelay_t_1_22 = intdelay_t_1_22 + 32'sd1) begin
          intdelay_reg_26[intdelay_t_1_22] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_22 = 32'sd0; intdelay_t_1_22 <= 32'sd2; intdelay_t_1_22 = intdelay_t_1_22 + 32'sd1) begin
            intdelay_reg_26[intdelay_t_1_22] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_22 = 32'sd0; intdelay_t_0_1_22 <= 32'sd2; intdelay_t_0_1_22 = intdelay_t_0_1_22 + 32'sd1) begin
            intdelay_reg_26[intdelay_t_0_1_22] <= intdelay_reg_next_23[intdelay_t_0_1_22];
          end
        end
      end
    end

  always @* begin
    din_5_6_im_dly = intdelay_reg_26[2];
    intdelay_reg_next_23[0] = dout_4_6_im;

    for(intdelay_t_0_023 = 32'sd0; intdelay_t_0_023 <= 32'sd1; intdelay_t_0_023 = intdelay_t_0_023 + 32'sd1) begin
      intdelay_reg_next_23[intdelay_t_0_023 + 32'sd1] = intdelay_reg_26[intdelay_t_0_023];
    end

  end



  TWDLROM_5_6 u_twdlROM_5_6 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_6_re(twdl_5_6_re),  // sfix16_En14
                             .twdl_5_6_im(twdl_5_6_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block4 u_SDF1_5_6 (.clk(clk),
                                       .reset(reset),
                                       .din_5_6_re_dly(din_5_6_re_dly),  // sfix20_En13
                                       .din_5_6_im_dly(din_5_6_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_6_re(twdl_5_6_re),  // sfix16_En14
                                       .twdl_5_6_im(twdl_5_6_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_6_re(dout_5_6_re),  // sfix21_En13
                                       .dout_5_6_im(dout_5_6_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block4 u_SDF2_6_6 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_6_re(dout_5_6_re),  // sfix21_En13
                                       .dout_5_6_im(dout_5_6_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_6_re(dout_6_6_re),  // sfix22_En13
                                       .dout_6_6_im(dout_6_6_im)  // sfix22_En13
                                       );

  TWDLROM_7_5 u_twdlROM_7_5 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_5_re(twdl_7_5_re),  // sfix16_En14
                             .twdl_7_5_im(twdl_7_5_im)  // sfix16_En14
                             );

  TWDLROM_7_6 u_twdlROM_7_6 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_6_re(twdl_7_6_re),  // sfix16_En14
                             .twdl_7_6_im(twdl_7_6_im)  // sfix16_En14
                             );

  TWDLMULT_SDNF1_7_block1 u_TWDLMULT_SDNF1_7_5 (.clk(clk),
                                                .reset(reset),
                                                .dout_6_5_re(dout_6_5_re),  // sfix22_En13
                                                .dout_6_5_im(dout_6_5_im),  // sfix22_En13
                                                .dout_6_6_re(dout_6_6_re),  // sfix22_En13
                                                .dout_6_6_im(dout_6_6_im),  // sfix22_En13
                                                .dout_6_1_vld(dout_6_1_vld),
                                                .twdl_7_5_re(twdl_7_5_re),  // sfix16_En14
                                                .twdl_7_5_im(twdl_7_5_im),  // sfix16_En14
                                                .twdl_7_6_re(twdl_7_6_re),  // sfix16_En14
                                                .twdl_7_6_im(twdl_7_6_im),  // sfix16_En14
                                                .twdlXdin_5_re(twdlXdin_5_re),  // sfix23_En13
                                                .twdlXdin_5_im(twdlXdin_5_im),  // sfix23_En13
                                                .twdlXdin_6_re(twdlXdin_6_re),  // sfix23_En13
                                                .twdlXdin_6_im(twdlXdin_6_im)  // sfix23_En13
                                                );

  RADIX22FFT_SDNF1_7 u_SDNF1_7_1 (.clk(clk),
                                  .reset(reset),
                                  .twdlXdin_1_re(twdlXdin_1_re),  // sfix23_En13
                                  .twdlXdin_1_im(twdlXdin_1_im),  // sfix23_En13
                                  .twdlXdin_5_re(twdlXdin_5_re),  // sfix23_En13
                                  .twdlXdin_5_im(twdlXdin_5_im),  // sfix23_En13
                                  .twdlXdin_1_vld(twdlXdin_1_vld),
                                  .dout_1_re(dout_1_re),  // sfix23_En13
                                  .dout_1_im(dout_1_im),  // sfix23_En13
                                  .dout_2_re(dout_2_re),  // sfix23_En13
                                  .dout_2_im(dout_2_im),  // sfix23_En13
                                  .dout_1_vld(dout_1_vld)
                                  );

  always @(posedge clk or posedge reset)
    begin : intdelay_27_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_23 = 32'sd0; intdelay_t_1_23 <= 32'sd2; intdelay_t_1_23 = intdelay_t_1_23 + 32'sd1) begin
          intdelay_reg_27[intdelay_t_1_23] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_23 = 32'sd0; intdelay_t_1_23 <= 32'sd2; intdelay_t_1_23 = intdelay_t_1_23 + 32'sd1) begin
            intdelay_reg_27[intdelay_t_1_23] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_23 = 32'sd0; intdelay_t_0_1_23 <= 32'sd2; intdelay_t_0_1_23 = intdelay_t_0_1_23 + 32'sd1) begin
            intdelay_reg_27[intdelay_t_0_1_23] <= intdelay_reg_next_24[intdelay_t_0_1_23];
          end
        end
      end
    end

  always @* begin
    din_1_3_re_dly = intdelay_reg_27[2];
    intdelay_reg_next_24[0] = dataIn_re_2;

    for(intdelay_t_0_024 = 32'sd0; intdelay_t_0_024 <= 32'sd1; intdelay_t_0_024 = intdelay_t_0_024 + 32'sd1) begin
      intdelay_reg_next_24[intdelay_t_0_024 + 32'sd1] = intdelay_reg_27[intdelay_t_0_024];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_28_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_24 = 32'sd0; intdelay_t_1_24 <= 32'sd2; intdelay_t_1_24 = intdelay_t_1_24 + 32'sd1) begin
          intdelay_reg_28[intdelay_t_1_24] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_24 = 32'sd0; intdelay_t_1_24 <= 32'sd2; intdelay_t_1_24 = intdelay_t_1_24 + 32'sd1) begin
            intdelay_reg_28[intdelay_t_1_24] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_24 = 32'sd0; intdelay_t_0_1_24 <= 32'sd2; intdelay_t_0_1_24 = intdelay_t_0_1_24 + 32'sd1) begin
            intdelay_reg_28[intdelay_t_0_1_24] <= intdelay_reg_next_25[intdelay_t_0_1_24];
          end
        end
      end
    end

  always @* begin
    din_1_3_im_dly = intdelay_reg_28[2];
    intdelay_reg_next_25[0] = dataIn_im_2;

    for(intdelay_t_0_025 = 32'sd0; intdelay_t_0_025 <= 32'sd1; intdelay_t_0_025 = intdelay_t_0_025 + 32'sd1) begin
      intdelay_reg_next_25[intdelay_t_0_025 + 32'sd1] = intdelay_reg_28[intdelay_t_0_025];
    end

  end



  RADIX22FFT_SDF1_1_block1 u_SDF1_1_3 (.clk(clk),
                                       .reset(reset),
                                       .din_1_3_re_dly(din_1_3_re_dly),  // sfix16_En13
                                       .din_1_3_im_dly(din_1_3_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_3_re(dout_1_3_re),  // sfix17_En13
                                       .dout_1_3_im(dout_1_3_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block1 u_SDF2_2_3 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_3_re(dout_1_3_re),  // sfix17_En13
                                       .dout_1_3_im(dout_1_3_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_3_re(dout_2_3_re),  // sfix18_En13
                                       .dout_2_3_im(dout_2_3_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_29_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_25 = 32'sd0; intdelay_t_1_25 <= 32'sd2; intdelay_t_1_25 = intdelay_t_1_25 + 32'sd1) begin
          intdelay_reg_29[intdelay_t_1_25] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_25 = 32'sd0; intdelay_t_1_25 <= 32'sd2; intdelay_t_1_25 = intdelay_t_1_25 + 32'sd1) begin
            intdelay_reg_29[intdelay_t_1_25] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_25 = 32'sd0; intdelay_t_0_1_25 <= 32'sd2; intdelay_t_0_1_25 = intdelay_t_0_1_25 + 32'sd1) begin
            intdelay_reg_29[intdelay_t_0_1_25] <= intdelay_reg_next_26[intdelay_t_0_1_25];
          end
        end
      end
    end

  always @* begin
    din_3_3_re_dly = intdelay_reg_29[2];
    intdelay_reg_next_26[0] = dout_2_3_re;

    for(intdelay_t_0_026 = 32'sd0; intdelay_t_0_026 <= 32'sd1; intdelay_t_0_026 = intdelay_t_0_026 + 32'sd1) begin
      intdelay_reg_next_26[intdelay_t_0_026 + 32'sd1] = intdelay_reg_29[intdelay_t_0_026];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_30_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_26 = 32'sd0; intdelay_t_1_26 <= 32'sd2; intdelay_t_1_26 = intdelay_t_1_26 + 32'sd1) begin
          intdelay_reg_30[intdelay_t_1_26] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_26 = 32'sd0; intdelay_t_1_26 <= 32'sd2; intdelay_t_1_26 = intdelay_t_1_26 + 32'sd1) begin
            intdelay_reg_30[intdelay_t_1_26] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_26 = 32'sd0; intdelay_t_0_1_26 <= 32'sd2; intdelay_t_0_1_26 = intdelay_t_0_1_26 + 32'sd1) begin
            intdelay_reg_30[intdelay_t_0_1_26] <= intdelay_reg_next_27[intdelay_t_0_1_26];
          end
        end
      end
    end

  always @* begin
    din_3_3_im_dly = intdelay_reg_30[2];
    intdelay_reg_next_27[0] = dout_2_3_im;

    for(intdelay_t_0_027 = 32'sd0; intdelay_t_0_027 <= 32'sd1; intdelay_t_0_027 = intdelay_t_0_027 + 32'sd1) begin
      intdelay_reg_next_27[intdelay_t_0_027 + 32'sd1] = intdelay_reg_30[intdelay_t_0_027];
    end

  end



  TWDLROM_3_3 u_twdlROM_3_3 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_3_re(twdl_3_3_re),  // sfix16_En14
                             .twdl_3_3_im(twdl_3_3_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block1 u_SDF1_3_3 (.clk(clk),
                                       .reset(reset),
                                       .din_3_3_re_dly(din_3_3_re_dly),  // sfix18_En13
                                       .din_3_3_im_dly(din_3_3_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_3_re(twdl_3_3_re),  // sfix16_En14
                                       .twdl_3_3_im(twdl_3_3_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_3_re(dout_3_3_re),  // sfix19_En13
                                       .dout_3_3_im(dout_3_3_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block1 u_SDF2_4_3 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_3_re(dout_3_3_re),  // sfix19_En13
                                       .dout_3_3_im(dout_3_3_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_3_re(dout_4_3_re),  // sfix20_En13
                                       .dout_4_3_im(dout_4_3_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_31_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_27 = 32'sd0; intdelay_t_1_27 <= 32'sd2; intdelay_t_1_27 = intdelay_t_1_27 + 32'sd1) begin
          intdelay_reg_31[intdelay_t_1_27] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_27 = 32'sd0; intdelay_t_1_27 <= 32'sd2; intdelay_t_1_27 = intdelay_t_1_27 + 32'sd1) begin
            intdelay_reg_31[intdelay_t_1_27] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_27 = 32'sd0; intdelay_t_0_1_27 <= 32'sd2; intdelay_t_0_1_27 = intdelay_t_0_1_27 + 32'sd1) begin
            intdelay_reg_31[intdelay_t_0_1_27] <= intdelay_reg_next_28[intdelay_t_0_1_27];
          end
        end
      end
    end

  always @* begin
    din_5_3_re_dly = intdelay_reg_31[2];
    intdelay_reg_next_28[0] = dout_4_3_re;

    for(intdelay_t_0_028 = 32'sd0; intdelay_t_0_028 <= 32'sd1; intdelay_t_0_028 = intdelay_t_0_028 + 32'sd1) begin
      intdelay_reg_next_28[intdelay_t_0_028 + 32'sd1] = intdelay_reg_31[intdelay_t_0_028];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_32_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_28 = 32'sd0; intdelay_t_1_28 <= 32'sd2; intdelay_t_1_28 = intdelay_t_1_28 + 32'sd1) begin
          intdelay_reg_32[intdelay_t_1_28] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_28 = 32'sd0; intdelay_t_1_28 <= 32'sd2; intdelay_t_1_28 = intdelay_t_1_28 + 32'sd1) begin
            intdelay_reg_32[intdelay_t_1_28] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_28 = 32'sd0; intdelay_t_0_1_28 <= 32'sd2; intdelay_t_0_1_28 = intdelay_t_0_1_28 + 32'sd1) begin
            intdelay_reg_32[intdelay_t_0_1_28] <= intdelay_reg_next_29[intdelay_t_0_1_28];
          end
        end
      end
    end

  always @* begin
    din_5_3_im_dly = intdelay_reg_32[2];
    intdelay_reg_next_29[0] = dout_4_3_im;

    for(intdelay_t_0_029 = 32'sd0; intdelay_t_0_029 <= 32'sd1; intdelay_t_0_029 = intdelay_t_0_029 + 32'sd1) begin
      intdelay_reg_next_29[intdelay_t_0_029 + 32'sd1] = intdelay_reg_32[intdelay_t_0_029];
    end

  end



  TWDLROM_5_3 u_twdlROM_5_3 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_3_re(twdl_5_3_re),  // sfix16_En14
                             .twdl_5_3_im(twdl_5_3_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block1 u_SDF1_5_3 (.clk(clk),
                                       .reset(reset),
                                       .din_5_3_re_dly(din_5_3_re_dly),  // sfix20_En13
                                       .din_5_3_im_dly(din_5_3_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_3_re(twdl_5_3_re),  // sfix16_En14
                                       .twdl_5_3_im(twdl_5_3_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_3_re(dout_5_3_re),  // sfix21_En13
                                       .dout_5_3_im(dout_5_3_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block1 u_SDF2_6_3 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_3_re(dout_5_3_re),  // sfix21_En13
                                       .dout_5_3_im(dout_5_3_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_3_re(dout_6_3_re),  // sfix22_En13
                                       .dout_6_3_im(dout_6_3_im)  // sfix22_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_33_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_29 = 32'sd0; intdelay_t_1_29 <= 32'sd2; intdelay_t_1_29 = intdelay_t_1_29 + 32'sd1) begin
          intdelay_reg_33[intdelay_t_1_29] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_29 = 32'sd0; intdelay_t_1_29 <= 32'sd2; intdelay_t_1_29 = intdelay_t_1_29 + 32'sd1) begin
            intdelay_reg_33[intdelay_t_1_29] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_29 = 32'sd0; intdelay_t_0_1_29 <= 32'sd2; intdelay_t_0_1_29 = intdelay_t_0_1_29 + 32'sd1) begin
            intdelay_reg_33[intdelay_t_0_1_29] <= intdelay_reg_next_30[intdelay_t_0_1_29];
          end
        end
      end
    end

  always @* begin
    din_1_4_re_dly = intdelay_reg_33[2];
    intdelay_reg_next_30[0] = dataIn_re_3;

    for(intdelay_t_0_030 = 32'sd0; intdelay_t_0_030 <= 32'sd1; intdelay_t_0_030 = intdelay_t_0_030 + 32'sd1) begin
      intdelay_reg_next_30[intdelay_t_0_030 + 32'sd1] = intdelay_reg_33[intdelay_t_0_030];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_34_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_30 = 32'sd0; intdelay_t_1_30 <= 32'sd2; intdelay_t_1_30 = intdelay_t_1_30 + 32'sd1) begin
          intdelay_reg_34[intdelay_t_1_30] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_30 = 32'sd0; intdelay_t_1_30 <= 32'sd2; intdelay_t_1_30 = intdelay_t_1_30 + 32'sd1) begin
            intdelay_reg_34[intdelay_t_1_30] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_30 = 32'sd0; intdelay_t_0_1_30 <= 32'sd2; intdelay_t_0_1_30 = intdelay_t_0_1_30 + 32'sd1) begin
            intdelay_reg_34[intdelay_t_0_1_30] <= intdelay_reg_next_31[intdelay_t_0_1_30];
          end
        end
      end
    end

  always @* begin
    din_1_4_im_dly = intdelay_reg_34[2];
    intdelay_reg_next_31[0] = dataIn_im_3;

    for(intdelay_t_0_031 = 32'sd0; intdelay_t_0_031 <= 32'sd1; intdelay_t_0_031 = intdelay_t_0_031 + 32'sd1) begin
      intdelay_reg_next_31[intdelay_t_0_031 + 32'sd1] = intdelay_reg_34[intdelay_t_0_031];
    end

  end



  RADIX22FFT_SDF1_1_block2 u_SDF1_1_4 (.clk(clk),
                                       .reset(reset),
                                       .din_1_4_re_dly(din_1_4_re_dly),  // sfix16_En13
                                       .din_1_4_im_dly(din_1_4_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_4_re(dout_1_4_re),  // sfix17_En13
                                       .dout_1_4_im(dout_1_4_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block2 u_SDF2_2_4 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_4_re(dout_1_4_re),  // sfix17_En13
                                       .dout_1_4_im(dout_1_4_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_4_re(dout_2_4_re),  // sfix18_En13
                                       .dout_2_4_im(dout_2_4_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_35_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_31 = 32'sd0; intdelay_t_1_31 <= 32'sd2; intdelay_t_1_31 = intdelay_t_1_31 + 32'sd1) begin
          intdelay_reg_35[intdelay_t_1_31] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_31 = 32'sd0; intdelay_t_1_31 <= 32'sd2; intdelay_t_1_31 = intdelay_t_1_31 + 32'sd1) begin
            intdelay_reg_35[intdelay_t_1_31] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_31 = 32'sd0; intdelay_t_0_1_31 <= 32'sd2; intdelay_t_0_1_31 = intdelay_t_0_1_31 + 32'sd1) begin
            intdelay_reg_35[intdelay_t_0_1_31] <= intdelay_reg_next_32[intdelay_t_0_1_31];
          end
        end
      end
    end

  always @* begin
    din_3_4_re_dly = intdelay_reg_35[2];
    intdelay_reg_next_32[0] = dout_2_4_re;

    for(intdelay_t_0_032 = 32'sd0; intdelay_t_0_032 <= 32'sd1; intdelay_t_0_032 = intdelay_t_0_032 + 32'sd1) begin
      intdelay_reg_next_32[intdelay_t_0_032 + 32'sd1] = intdelay_reg_35[intdelay_t_0_032];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_36_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_32 = 32'sd0; intdelay_t_1_32 <= 32'sd2; intdelay_t_1_32 = intdelay_t_1_32 + 32'sd1) begin
          intdelay_reg_36[intdelay_t_1_32] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_32 = 32'sd0; intdelay_t_1_32 <= 32'sd2; intdelay_t_1_32 = intdelay_t_1_32 + 32'sd1) begin
            intdelay_reg_36[intdelay_t_1_32] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_32 = 32'sd0; intdelay_t_0_1_32 <= 32'sd2; intdelay_t_0_1_32 = intdelay_t_0_1_32 + 32'sd1) begin
            intdelay_reg_36[intdelay_t_0_1_32] <= intdelay_reg_next_33[intdelay_t_0_1_32];
          end
        end
      end
    end

  always @* begin
    din_3_4_im_dly = intdelay_reg_36[2];
    intdelay_reg_next_33[0] = dout_2_4_im;

    for(intdelay_t_0_033 = 32'sd0; intdelay_t_0_033 <= 32'sd1; intdelay_t_0_033 = intdelay_t_0_033 + 32'sd1) begin
      intdelay_reg_next_33[intdelay_t_0_033 + 32'sd1] = intdelay_reg_36[intdelay_t_0_033];
    end

  end



  TWDLROM_3_4 u_twdlROM_3_4 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_4_re(twdl_3_4_re),  // sfix16_En14
                             .twdl_3_4_im(twdl_3_4_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block2 u_SDF1_3_4 (.clk(clk),
                                       .reset(reset),
                                       .din_3_4_re_dly(din_3_4_re_dly),  // sfix18_En13
                                       .din_3_4_im_dly(din_3_4_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_4_re(twdl_3_4_re),  // sfix16_En14
                                       .twdl_3_4_im(twdl_3_4_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_4_re(dout_3_4_re),  // sfix19_En13
                                       .dout_3_4_im(dout_3_4_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block2 u_SDF2_4_4 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_4_re(dout_3_4_re),  // sfix19_En13
                                       .dout_3_4_im(dout_3_4_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_4_re(dout_4_4_re),  // sfix20_En13
                                       .dout_4_4_im(dout_4_4_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_37_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_33 = 32'sd0; intdelay_t_1_33 <= 32'sd2; intdelay_t_1_33 = intdelay_t_1_33 + 32'sd1) begin
          intdelay_reg_37[intdelay_t_1_33] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_33 = 32'sd0; intdelay_t_1_33 <= 32'sd2; intdelay_t_1_33 = intdelay_t_1_33 + 32'sd1) begin
            intdelay_reg_37[intdelay_t_1_33] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_33 = 32'sd0; intdelay_t_0_1_33 <= 32'sd2; intdelay_t_0_1_33 = intdelay_t_0_1_33 + 32'sd1) begin
            intdelay_reg_37[intdelay_t_0_1_33] <= intdelay_reg_next_34[intdelay_t_0_1_33];
          end
        end
      end
    end

  always @* begin
    din_5_4_re_dly = intdelay_reg_37[2];
    intdelay_reg_next_34[0] = dout_4_4_re;

    for(intdelay_t_0_034 = 32'sd0; intdelay_t_0_034 <= 32'sd1; intdelay_t_0_034 = intdelay_t_0_034 + 32'sd1) begin
      intdelay_reg_next_34[intdelay_t_0_034 + 32'sd1] = intdelay_reg_37[intdelay_t_0_034];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_38_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_34 = 32'sd0; intdelay_t_1_34 <= 32'sd2; intdelay_t_1_34 = intdelay_t_1_34 + 32'sd1) begin
          intdelay_reg_38[intdelay_t_1_34] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_34 = 32'sd0; intdelay_t_1_34 <= 32'sd2; intdelay_t_1_34 = intdelay_t_1_34 + 32'sd1) begin
            intdelay_reg_38[intdelay_t_1_34] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_34 = 32'sd0; intdelay_t_0_1_34 <= 32'sd2; intdelay_t_0_1_34 = intdelay_t_0_1_34 + 32'sd1) begin
            intdelay_reg_38[intdelay_t_0_1_34] <= intdelay_reg_next_35[intdelay_t_0_1_34];
          end
        end
      end
    end

  always @* begin
    din_5_4_im_dly = intdelay_reg_38[2];
    intdelay_reg_next_35[0] = dout_4_4_im;

    for(intdelay_t_0_035 = 32'sd0; intdelay_t_0_035 <= 32'sd1; intdelay_t_0_035 = intdelay_t_0_035 + 32'sd1) begin
      intdelay_reg_next_35[intdelay_t_0_035 + 32'sd1] = intdelay_reg_38[intdelay_t_0_035];
    end

  end



  TWDLROM_5_4 u_twdlROM_5_4 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_4_re(twdl_5_4_re),  // sfix16_En14
                             .twdl_5_4_im(twdl_5_4_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block2 u_SDF1_5_4 (.clk(clk),
                                       .reset(reset),
                                       .din_5_4_re_dly(din_5_4_re_dly),  // sfix20_En13
                                       .din_5_4_im_dly(din_5_4_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_4_re(twdl_5_4_re),  // sfix16_En14
                                       .twdl_5_4_im(twdl_5_4_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_4_re(dout_5_4_re),  // sfix21_En13
                                       .dout_5_4_im(dout_5_4_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block2 u_SDF2_6_4 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_4_re(dout_5_4_re),  // sfix21_En13
                                       .dout_5_4_im(dout_5_4_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_4_re(dout_6_4_re),  // sfix22_En13
                                       .dout_6_4_im(dout_6_4_im)  // sfix22_En13
                                       );

  TWDLROM_7_3 u_twdlROM_7_3 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_3_re(twdl_7_3_re),  // sfix16_En14
                             .twdl_7_3_im(twdl_7_3_im)  // sfix16_En14
                             );

  TWDLROM_7_4 u_twdlROM_7_4 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_4_re(twdl_7_4_re),  // sfix16_En14
                             .twdl_7_4_im(twdl_7_4_im)  // sfix16_En14
                             );

  TWDLMULT_SDNF1_7_block u_TWDLMULT_SDNF1_7_3 (.clk(clk),
                                               .reset(reset),
                                               .dout_6_3_re(dout_6_3_re),  // sfix22_En13
                                               .dout_6_3_im(dout_6_3_im),  // sfix22_En13
                                               .dout_6_4_re(dout_6_4_re),  // sfix22_En13
                                               .dout_6_4_im(dout_6_4_im),  // sfix22_En13
                                               .dout_6_1_vld(dout_6_1_vld),
                                               .twdl_7_3_re(twdl_7_3_re),  // sfix16_En14
                                               .twdl_7_3_im(twdl_7_3_im),  // sfix16_En14
                                               .twdl_7_4_re(twdl_7_4_re),  // sfix16_En14
                                               .twdl_7_4_im(twdl_7_4_im),  // sfix16_En14
                                               .twdlXdin_3_re(twdlXdin_3_re),  // sfix23_En13
                                               .twdlXdin_3_im(twdlXdin_3_im),  // sfix23_En13
                                               .twdlXdin_4_re(twdlXdin_4_re),  // sfix23_En13
                                               .twdlXdin_4_im(twdlXdin_4_im)  // sfix23_En13
                                               );

  always @(posedge clk or posedge reset)
    begin : intdelay_39_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_35 = 32'sd0; intdelay_t_1_35 <= 32'sd2; intdelay_t_1_35 = intdelay_t_1_35 + 32'sd1) begin
          intdelay_reg_39[intdelay_t_1_35] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_35 = 32'sd0; intdelay_t_1_35 <= 32'sd2; intdelay_t_1_35 = intdelay_t_1_35 + 32'sd1) begin
            intdelay_reg_39[intdelay_t_1_35] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_35 = 32'sd0; intdelay_t_0_1_35 <= 32'sd2; intdelay_t_0_1_35 = intdelay_t_0_1_35 + 32'sd1) begin
            intdelay_reg_39[intdelay_t_0_1_35] <= intdelay_reg_next_36[intdelay_t_0_1_35];
          end
        end
      end
    end

  always @* begin
    din_1_7_re_dly = intdelay_reg_39[2];
    intdelay_reg_next_36[0] = dataIn_re_6;

    for(intdelay_t_0_036 = 32'sd0; intdelay_t_0_036 <= 32'sd1; intdelay_t_0_036 = intdelay_t_0_036 + 32'sd1) begin
      intdelay_reg_next_36[intdelay_t_0_036 + 32'sd1] = intdelay_reg_39[intdelay_t_0_036];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_40_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_36 = 32'sd0; intdelay_t_1_36 <= 32'sd2; intdelay_t_1_36 = intdelay_t_1_36 + 32'sd1) begin
          intdelay_reg_40[intdelay_t_1_36] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_36 = 32'sd0; intdelay_t_1_36 <= 32'sd2; intdelay_t_1_36 = intdelay_t_1_36 + 32'sd1) begin
            intdelay_reg_40[intdelay_t_1_36] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_36 = 32'sd0; intdelay_t_0_1_36 <= 32'sd2; intdelay_t_0_1_36 = intdelay_t_0_1_36 + 32'sd1) begin
            intdelay_reg_40[intdelay_t_0_1_36] <= intdelay_reg_next_37[intdelay_t_0_1_36];
          end
        end
      end
    end

  always @* begin
    din_1_7_im_dly = intdelay_reg_40[2];
    intdelay_reg_next_37[0] = dataIn_im_6;

    for(intdelay_t_0_037 = 32'sd0; intdelay_t_0_037 <= 32'sd1; intdelay_t_0_037 = intdelay_t_0_037 + 32'sd1) begin
      intdelay_reg_next_37[intdelay_t_0_037 + 32'sd1] = intdelay_reg_40[intdelay_t_0_037];
    end

  end



  RADIX22FFT_SDF1_1_block5 u_SDF1_1_7 (.clk(clk),
                                       .reset(reset),
                                       .din_1_7_re_dly(din_1_7_re_dly),  // sfix16_En13
                                       .din_1_7_im_dly(din_1_7_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_7_re(dout_1_7_re),  // sfix17_En13
                                       .dout_1_7_im(dout_1_7_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block5 u_SDF2_2_7 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_7_re(dout_1_7_re),  // sfix17_En13
                                       .dout_1_7_im(dout_1_7_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_7_re(dout_2_7_re),  // sfix18_En13
                                       .dout_2_7_im(dout_2_7_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_41_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_37 = 32'sd0; intdelay_t_1_37 <= 32'sd2; intdelay_t_1_37 = intdelay_t_1_37 + 32'sd1) begin
          intdelay_reg_41[intdelay_t_1_37] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_37 = 32'sd0; intdelay_t_1_37 <= 32'sd2; intdelay_t_1_37 = intdelay_t_1_37 + 32'sd1) begin
            intdelay_reg_41[intdelay_t_1_37] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_37 = 32'sd0; intdelay_t_0_1_37 <= 32'sd2; intdelay_t_0_1_37 = intdelay_t_0_1_37 + 32'sd1) begin
            intdelay_reg_41[intdelay_t_0_1_37] <= intdelay_reg_next_38[intdelay_t_0_1_37];
          end
        end
      end
    end

  always @* begin
    din_3_7_re_dly = intdelay_reg_41[2];
    intdelay_reg_next_38[0] = dout_2_7_re;

    for(intdelay_t_0_038 = 32'sd0; intdelay_t_0_038 <= 32'sd1; intdelay_t_0_038 = intdelay_t_0_038 + 32'sd1) begin
      intdelay_reg_next_38[intdelay_t_0_038 + 32'sd1] = intdelay_reg_41[intdelay_t_0_038];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_42_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_38 = 32'sd0; intdelay_t_1_38 <= 32'sd2; intdelay_t_1_38 = intdelay_t_1_38 + 32'sd1) begin
          intdelay_reg_42[intdelay_t_1_38] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_38 = 32'sd0; intdelay_t_1_38 <= 32'sd2; intdelay_t_1_38 = intdelay_t_1_38 + 32'sd1) begin
            intdelay_reg_42[intdelay_t_1_38] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_38 = 32'sd0; intdelay_t_0_1_38 <= 32'sd2; intdelay_t_0_1_38 = intdelay_t_0_1_38 + 32'sd1) begin
            intdelay_reg_42[intdelay_t_0_1_38] <= intdelay_reg_next_39[intdelay_t_0_1_38];
          end
        end
      end
    end

  always @* begin
    din_3_7_im_dly = intdelay_reg_42[2];
    intdelay_reg_next_39[0] = dout_2_7_im;

    for(intdelay_t_0_039 = 32'sd0; intdelay_t_0_039 <= 32'sd1; intdelay_t_0_039 = intdelay_t_0_039 + 32'sd1) begin
      intdelay_reg_next_39[intdelay_t_0_039 + 32'sd1] = intdelay_reg_42[intdelay_t_0_039];
    end

  end



  TWDLROM_3_7 u_twdlROM_3_7 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_7_re(twdl_3_7_re),  // sfix16_En14
                             .twdl_3_7_im(twdl_3_7_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block5 u_SDF1_3_7 (.clk(clk),
                                       .reset(reset),
                                       .din_3_7_re_dly(din_3_7_re_dly),  // sfix18_En13
                                       .din_3_7_im_dly(din_3_7_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_7_re(twdl_3_7_re),  // sfix16_En14
                                       .twdl_3_7_im(twdl_3_7_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_7_re(dout_3_7_re),  // sfix19_En13
                                       .dout_3_7_im(dout_3_7_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block5 u_SDF2_4_7 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_7_re(dout_3_7_re),  // sfix19_En13
                                       .dout_3_7_im(dout_3_7_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_7_re(dout_4_7_re),  // sfix20_En13
                                       .dout_4_7_im(dout_4_7_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_43_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_39 = 32'sd0; intdelay_t_1_39 <= 32'sd2; intdelay_t_1_39 = intdelay_t_1_39 + 32'sd1) begin
          intdelay_reg_43[intdelay_t_1_39] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_39 = 32'sd0; intdelay_t_1_39 <= 32'sd2; intdelay_t_1_39 = intdelay_t_1_39 + 32'sd1) begin
            intdelay_reg_43[intdelay_t_1_39] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_39 = 32'sd0; intdelay_t_0_1_39 <= 32'sd2; intdelay_t_0_1_39 = intdelay_t_0_1_39 + 32'sd1) begin
            intdelay_reg_43[intdelay_t_0_1_39] <= intdelay_reg_next_40[intdelay_t_0_1_39];
          end
        end
      end
    end

  always @* begin
    din_5_7_re_dly = intdelay_reg_43[2];
    intdelay_reg_next_40[0] = dout_4_7_re;

    for(intdelay_t_0_040 = 32'sd0; intdelay_t_0_040 <= 32'sd1; intdelay_t_0_040 = intdelay_t_0_040 + 32'sd1) begin
      intdelay_reg_next_40[intdelay_t_0_040 + 32'sd1] = intdelay_reg_43[intdelay_t_0_040];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_44_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_40 = 32'sd0; intdelay_t_1_40 <= 32'sd2; intdelay_t_1_40 = intdelay_t_1_40 + 32'sd1) begin
          intdelay_reg_44[intdelay_t_1_40] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_40 = 32'sd0; intdelay_t_1_40 <= 32'sd2; intdelay_t_1_40 = intdelay_t_1_40 + 32'sd1) begin
            intdelay_reg_44[intdelay_t_1_40] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_40 = 32'sd0; intdelay_t_0_1_40 <= 32'sd2; intdelay_t_0_1_40 = intdelay_t_0_1_40 + 32'sd1) begin
            intdelay_reg_44[intdelay_t_0_1_40] <= intdelay_reg_next_41[intdelay_t_0_1_40];
          end
        end
      end
    end

  always @* begin
    din_5_7_im_dly = intdelay_reg_44[2];
    intdelay_reg_next_41[0] = dout_4_7_im;

    for(intdelay_t_0_041 = 32'sd0; intdelay_t_0_041 <= 32'sd1; intdelay_t_0_041 = intdelay_t_0_041 + 32'sd1) begin
      intdelay_reg_next_41[intdelay_t_0_041 + 32'sd1] = intdelay_reg_44[intdelay_t_0_041];
    end

  end



  TWDLROM_5_7 u_twdlROM_5_7 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_7_re(twdl_5_7_re),  // sfix16_En14
                             .twdl_5_7_im(twdl_5_7_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block5 u_SDF1_5_7 (.clk(clk),
                                       .reset(reset),
                                       .din_5_7_re_dly(din_5_7_re_dly),  // sfix20_En13
                                       .din_5_7_im_dly(din_5_7_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_7_re(twdl_5_7_re),  // sfix16_En14
                                       .twdl_5_7_im(twdl_5_7_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_7_re(dout_5_7_re),  // sfix21_En13
                                       .dout_5_7_im(dout_5_7_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block5 u_SDF2_6_7 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_7_re(dout_5_7_re),  // sfix21_En13
                                       .dout_5_7_im(dout_5_7_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_7_re(dout_6_7_re),  // sfix22_En13
                                       .dout_6_7_im(dout_6_7_im)  // sfix22_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_45_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_41 = 32'sd0; intdelay_t_1_41 <= 32'sd2; intdelay_t_1_41 = intdelay_t_1_41 + 32'sd1) begin
          intdelay_reg_45[intdelay_t_1_41] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_41 = 32'sd0; intdelay_t_1_41 <= 32'sd2; intdelay_t_1_41 = intdelay_t_1_41 + 32'sd1) begin
            intdelay_reg_45[intdelay_t_1_41] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_41 = 32'sd0; intdelay_t_0_1_41 <= 32'sd2; intdelay_t_0_1_41 = intdelay_t_0_1_41 + 32'sd1) begin
            intdelay_reg_45[intdelay_t_0_1_41] <= intdelay_reg_next_42[intdelay_t_0_1_41];
          end
        end
      end
    end

  always @* begin
    din_1_8_re_dly = intdelay_reg_45[2];
    intdelay_reg_next_42[0] = dataIn_re_7;

    for(intdelay_t_0_042 = 32'sd0; intdelay_t_0_042 <= 32'sd1; intdelay_t_0_042 = intdelay_t_0_042 + 32'sd1) begin
      intdelay_reg_next_42[intdelay_t_0_042 + 32'sd1] = intdelay_reg_45[intdelay_t_0_042];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_46_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_42 = 32'sd0; intdelay_t_1_42 <= 32'sd2; intdelay_t_1_42 = intdelay_t_1_42 + 32'sd1) begin
          intdelay_reg_46[intdelay_t_1_42] <= 16'sb0000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_42 = 32'sd0; intdelay_t_1_42 <= 32'sd2; intdelay_t_1_42 = intdelay_t_1_42 + 32'sd1) begin
            intdelay_reg_46[intdelay_t_1_42] <= 16'sb0000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_42 = 32'sd0; intdelay_t_0_1_42 <= 32'sd2; intdelay_t_0_1_42 = intdelay_t_0_1_42 + 32'sd1) begin
            intdelay_reg_46[intdelay_t_0_1_42] <= intdelay_reg_next_43[intdelay_t_0_1_42];
          end
        end
      end
    end

  always @* begin
    din_1_8_im_dly = intdelay_reg_46[2];
    intdelay_reg_next_43[0] = dataIn_im_7;

    for(intdelay_t_0_043 = 32'sd0; intdelay_t_0_043 <= 32'sd1; intdelay_t_0_043 = intdelay_t_0_043 + 32'sd1) begin
      intdelay_reg_next_43[intdelay_t_0_043 + 32'sd1] = intdelay_reg_46[intdelay_t_0_043];
    end

  end



  RADIX22FFT_SDF1_1_block6 u_SDF1_1_8 (.clk(clk),
                                       .reset(reset),
                                       .din_1_8_re_dly(din_1_8_re_dly),  // sfix16_En13
                                       .din_1_8_im_dly(din_1_8_im_dly),  // sfix16_En13
                                       .din_1_vld_dly(din_1_vld_dly),
                                       .rd_1_Addr(rd_1_Addr),  // ufix5
                                       .rd_1_Enb(rd_1_Enb),
                                       .proc_1_enb(proc_1_enb),
                                       .dout_1_8_re(dout_1_8_re),  // sfix17_En13
                                       .dout_1_8_im(dout_1_8_im)  // sfix17_En13
                                       );

  RADIX22FFT_SDF2_2_block6 u_SDF2_2_8 (.clk(clk),
                                       .reset(reset),
                                       .dout_1_8_re(dout_1_8_re),  // sfix17_En13
                                       .dout_1_8_im(dout_1_8_im),  // sfix17_En13
                                       .dout_1_1_vld(dout_1_1_vld),
                                       .rd_2_Addr(rd_2_Addr),  // ufix4
                                       .rd_2_Enb(rd_2_Enb),
                                       .proc_2_enb(proc_2_enb),
                                       .multiply_2_J(multiply_2_J),
                                       .dout_2_8_re(dout_2_8_re),  // sfix18_En13
                                       .dout_2_8_im(dout_2_8_im)  // sfix18_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_47_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_43 = 32'sd0; intdelay_t_1_43 <= 32'sd2; intdelay_t_1_43 = intdelay_t_1_43 + 32'sd1) begin
          intdelay_reg_47[intdelay_t_1_43] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_43 = 32'sd0; intdelay_t_1_43 <= 32'sd2; intdelay_t_1_43 = intdelay_t_1_43 + 32'sd1) begin
            intdelay_reg_47[intdelay_t_1_43] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_43 = 32'sd0; intdelay_t_0_1_43 <= 32'sd2; intdelay_t_0_1_43 = intdelay_t_0_1_43 + 32'sd1) begin
            intdelay_reg_47[intdelay_t_0_1_43] <= intdelay_reg_next_44[intdelay_t_0_1_43];
          end
        end
      end
    end

  always @* begin
    din_3_8_re_dly = intdelay_reg_47[2];
    intdelay_reg_next_44[0] = dout_2_8_re;

    for(intdelay_t_0_044 = 32'sd0; intdelay_t_0_044 <= 32'sd1; intdelay_t_0_044 = intdelay_t_0_044 + 32'sd1) begin
      intdelay_reg_next_44[intdelay_t_0_044 + 32'sd1] = intdelay_reg_47[intdelay_t_0_044];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_48_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_44 = 32'sd0; intdelay_t_1_44 <= 32'sd2; intdelay_t_1_44 = intdelay_t_1_44 + 32'sd1) begin
          intdelay_reg_48[intdelay_t_1_44] <= 18'sb000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_44 = 32'sd0; intdelay_t_1_44 <= 32'sd2; intdelay_t_1_44 = intdelay_t_1_44 + 32'sd1) begin
            intdelay_reg_48[intdelay_t_1_44] <= 18'sb000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_44 = 32'sd0; intdelay_t_0_1_44 <= 32'sd2; intdelay_t_0_1_44 = intdelay_t_0_1_44 + 32'sd1) begin
            intdelay_reg_48[intdelay_t_0_1_44] <= intdelay_reg_next_45[intdelay_t_0_1_44];
          end
        end
      end
    end

  always @* begin
    din_3_8_im_dly = intdelay_reg_48[2];
    intdelay_reg_next_45[0] = dout_2_8_im;

    for(intdelay_t_0_045 = 32'sd0; intdelay_t_0_045 <= 32'sd1; intdelay_t_0_045 = intdelay_t_0_045 + 32'sd1) begin
      intdelay_reg_next_45[intdelay_t_0_045 + 32'sd1] = intdelay_reg_48[intdelay_t_0_045];
    end

  end



  TWDLROM_3_8 u_twdlROM_3_8 (.clk(clk),
                             .reset(reset),
                             .dout_2_1_vld(dout_2_1_vld),
                             .twdl_3_8_re(twdl_3_8_re),  // sfix16_En14
                             .twdl_3_8_im(twdl_3_8_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_3_block6 u_SDF1_3_8 (.clk(clk),
                                       .reset(reset),
                                       .din_3_8_re_dly(din_3_8_re_dly),  // sfix18_En13
                                       .din_3_8_im_dly(din_3_8_im_dly),  // sfix18_En13
                                       .din_3_vld_dly(din_3_vld_dly),
                                       .rd_3_Addr(rd_3_Addr),  // ufix3
                                       .rd_3_Enb(rd_3_Enb),
                                       .twdl_3_8_re(twdl_3_8_re),  // sfix16_En14
                                       .twdl_3_8_im(twdl_3_8_im),  // sfix16_En14
                                       .proc_3_enb(proc_3_enb),
                                       .dout_3_8_re(dout_3_8_re),  // sfix19_En13
                                       .dout_3_8_im(dout_3_8_im)  // sfix19_En13
                                       );

  RADIX22FFT_SDF2_4_block6 u_SDF2_4_8 (.clk(clk),
                                       .reset(reset),
                                       .dout_3_8_re(dout_3_8_re),  // sfix19_En13
                                       .dout_3_8_im(dout_3_8_im),  // sfix19_En13
                                       .dout_3_1_vld(dout_3_1_vld),
                                       .rd_4_Addr(rd_4_Addr),  // ufix2
                                       .rd_4_Enb(rd_4_Enb),
                                       .proc_4_enb(proc_4_enb),
                                       .multiply_4_J(multiply_4_J),
                                       .dout_4_8_re(dout_4_8_re),  // sfix20_En13
                                       .dout_4_8_im(dout_4_8_im)  // sfix20_En13
                                       );

  always @(posedge clk or posedge reset)
    begin : intdelay_49_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_45 = 32'sd0; intdelay_t_1_45 <= 32'sd2; intdelay_t_1_45 = intdelay_t_1_45 + 32'sd1) begin
          intdelay_reg_49[intdelay_t_1_45] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_45 = 32'sd0; intdelay_t_1_45 <= 32'sd2; intdelay_t_1_45 = intdelay_t_1_45 + 32'sd1) begin
            intdelay_reg_49[intdelay_t_1_45] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_45 = 32'sd0; intdelay_t_0_1_45 <= 32'sd2; intdelay_t_0_1_45 = intdelay_t_0_1_45 + 32'sd1) begin
            intdelay_reg_49[intdelay_t_0_1_45] <= intdelay_reg_next_46[intdelay_t_0_1_45];
          end
        end
      end
    end

  always @* begin
    din_5_8_re_dly = intdelay_reg_49[2];
    intdelay_reg_next_46[0] = dout_4_8_re;

    for(intdelay_t_0_046 = 32'sd0; intdelay_t_0_046 <= 32'sd1; intdelay_t_0_046 = intdelay_t_0_046 + 32'sd1) begin
      intdelay_reg_next_46[intdelay_t_0_046 + 32'sd1] = intdelay_reg_49[intdelay_t_0_046];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_50_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_46 = 32'sd0; intdelay_t_1_46 <= 32'sd2; intdelay_t_1_46 = intdelay_t_1_46 + 32'sd1) begin
          intdelay_reg_50[intdelay_t_1_46] <= 20'sb00000000000000000000;
        end
      end
      else begin
        if (softReset == 1'b1) begin
          for(intdelay_t_1_46 = 32'sd0; intdelay_t_1_46 <= 32'sd2; intdelay_t_1_46 = intdelay_t_1_46 + 32'sd1) begin
            intdelay_reg_50[intdelay_t_1_46] <= 20'sb00000000000000000000;
          end
        end
        else begin
          for(intdelay_t_0_1_46 = 32'sd0; intdelay_t_0_1_46 <= 32'sd2; intdelay_t_0_1_46 = intdelay_t_0_1_46 + 32'sd1) begin
            intdelay_reg_50[intdelay_t_0_1_46] <= intdelay_reg_next_47[intdelay_t_0_1_46];
          end
        end
      end
    end

  always @* begin
    din_5_8_im_dly = intdelay_reg_50[2];
    intdelay_reg_next_47[0] = dout_4_8_im;

    for(intdelay_t_0_047 = 32'sd0; intdelay_t_0_047 <= 32'sd1; intdelay_t_0_047 = intdelay_t_0_047 + 32'sd1) begin
      intdelay_reg_next_47[intdelay_t_0_047 + 32'sd1] = intdelay_reg_50[intdelay_t_0_047];
    end

  end



  TWDLROM_5_8 u_twdlROM_5_8 (.clk(clk),
                             .reset(reset),
                             .dout_4_1_vld(dout_4_1_vld),
                             .twdl_5_8_re(twdl_5_8_re),  // sfix16_En14
                             .twdl_5_8_im(twdl_5_8_im)  // sfix16_En14
                             );

  RADIX22FFT_SDF1_5_block6 u_SDF1_5_8 (.clk(clk),
                                       .reset(reset),
                                       .din_5_8_re_dly(din_5_8_re_dly),  // sfix20_En13
                                       .din_5_8_im_dly(din_5_8_im_dly),  // sfix20_En13
                                       .din_5_vld_dly(din_5_vld_dly),
                                       .rd_5_Addr(rd_5_Addr),  // ufix1
                                       .rd_5_Enb(rd_5_Enb),
                                       .twdl_5_8_re(twdl_5_8_re),  // sfix16_En14
                                       .twdl_5_8_im(twdl_5_8_im),  // sfix16_En14
                                       .proc_5_enb(proc_5_enb),
                                       .dout_5_8_re(dout_5_8_re),  // sfix21_En13
                                       .dout_5_8_im(dout_5_8_im)  // sfix21_En13
                                       );

  RADIX22FFT_SDF2_6_block6 u_SDF2_6_8 (.clk(clk),
                                       .reset(reset),
                                       .dout_5_8_re(dout_5_8_re),  // sfix21_En13
                                       .dout_5_8_im(dout_5_8_im),  // sfix21_En13
                                       .dout_5_1_vld(dout_5_1_vld),
                                       .rd_6_Addr(rd_6_Addr),
                                       .rd_6_Enb(rd_6_Enb),
                                       .proc_6_enb(proc_6_enb),
                                       .multiply_6_J(multiply_6_J),
                                       .dout_6_8_re(dout_6_8_re),  // sfix22_En13
                                       .dout_6_8_im(dout_6_8_im)  // sfix22_En13
                                       );

  TWDLROM_7_7 u_twdlROM_7_7 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_7_re(twdl_7_7_re),  // sfix16_En14
                             .twdl_7_7_im(twdl_7_7_im)  // sfix16_En14
                             );

  TWDLROM_7_8 u_twdlROM_7_8 (.clk(clk),
                             .reset(reset),
                             .dout_6_1_vld(dout_6_1_vld),
                             .twdl_7_8_re(twdl_7_8_re),  // sfix16_En14
                             .twdl_7_8_im(twdl_7_8_im)  // sfix16_En14
                             );

  TWDLMULT_SDNF1_7_block2 u_TWDLMULT_SDNF1_7_7 (.clk(clk),
                                                .reset(reset),
                                                .dout_6_7_re(dout_6_7_re),  // sfix22_En13
                                                .dout_6_7_im(dout_6_7_im),  // sfix22_En13
                                                .dout_6_8_re(dout_6_8_re),  // sfix22_En13
                                                .dout_6_8_im(dout_6_8_im),  // sfix22_En13
                                                .dout_6_1_vld(dout_6_1_vld),
                                                .twdl_7_7_re(twdl_7_7_re),  // sfix16_En14
                                                .twdl_7_7_im(twdl_7_7_im),  // sfix16_En14
                                                .twdl_7_8_re(twdl_7_8_re),  // sfix16_En14
                                                .twdl_7_8_im(twdl_7_8_im),  // sfix16_En14
                                                .twdlXdin_7_re(twdlXdin_7_re),  // sfix23_En13
                                                .twdlXdin_7_im(twdlXdin_7_im),  // sfix23_En13
                                                .twdlXdin_8_re(twdlXdin_8_re),  // sfix23_En13
                                                .twdlXdin_8_im(twdlXdin_8_im)  // sfix23_En13
                                                );

  RADIX22FFT_SDNF1_7_block1 u_SDNF1_7_5 (.clk(clk),
                                         .reset(reset),
                                         .twdlXdin_3_re(twdlXdin_3_re),  // sfix23_En13
                                         .twdlXdin_3_im(twdlXdin_3_im),  // sfix23_En13
                                         .twdlXdin_7_re(twdlXdin_7_re),  // sfix23_En13
                                         .twdlXdin_7_im(twdlXdin_7_im),  // sfix23_En13
                                         .twdlXdin_1_vld(twdlXdin_1_vld),
                                         .dout_5_re(dout_5_re),  // sfix23_En13
                                         .dout_5_im(dout_5_im),  // sfix23_En13
                                         .dout_6_re(dout_6_re),  // sfix23_En13
                                         .dout_6_im(dout_6_im)  // sfix23_En13
                                         );

  RADIX22FFT_SDNF2_8 u_SDNF2_8_1 (.clk(clk),
                                  .reset(reset),
                                  .rotate_1(rotate_1),  // ufix1
                                  .dout_1_re(dout_1_re),  // sfix23_En13
                                  .dout_1_im(dout_1_im),  // sfix23_En13
                                  .dout_5_re(dout_5_re),  // sfix23_En13
                                  .dout_5_im(dout_5_im),  // sfix23_En13
                                  .dout_1_vld(dout_1_vld),
                                  .dout_1_re_1(dout_1_re_1),  // sfix24_En13
                                  .dout_1_im_1(dout_1_im_1),  // sfix24_En13
                                  .dout_2_re(dout_2_re_1),  // sfix24_En13
                                  .dout_2_im(dout_2_im_1),  // sfix24_En13
                                  .dout_8_vld(dout_8_vld)
                                  );

  assign rotate_3 = 1'b0;



  RADIX22FFT_SDNF1_7_block u_SDNF1_7_3 (.clk(clk),
                                        .reset(reset),
                                        .twdlXdin_2_re(twdlXdin_2_re),  // sfix23_En13
                                        .twdlXdin_2_im(twdlXdin_2_im),  // sfix23_En13
                                        .twdlXdin_6_re(twdlXdin_6_re),  // sfix23_En13
                                        .twdlXdin_6_im(twdlXdin_6_im),  // sfix23_En13
                                        .twdlXdin_1_vld(twdlXdin_1_vld),
                                        .dout_3_re(dout_3_re),  // sfix23_En13
                                        .dout_3_im(dout_3_im),  // sfix23_En13
                                        .dout_4_re(dout_4_re),  // sfix23_En13
                                        .dout_4_im(dout_4_im)  // sfix23_En13
                                        );

  RADIX22FFT_SDNF1_7_block2 u_SDNF1_7_7 (.clk(clk),
                                         .reset(reset),
                                         .twdlXdin_4_re(twdlXdin_4_re),  // sfix23_En13
                                         .twdlXdin_4_im(twdlXdin_4_im),  // sfix23_En13
                                         .twdlXdin_8_re(twdlXdin_8_re),  // sfix23_En13
                                         .twdlXdin_8_im(twdlXdin_8_im),  // sfix23_En13
                                         .twdlXdin_1_vld(twdlXdin_1_vld),
                                         .dout_7_re(dout_7_re),  // sfix23_En13
                                         .dout_7_im(dout_7_im),  // sfix23_En13
                                         .dout_8_re(dout_8_re),  // sfix23_En13
                                         .dout_8_im(dout_8_im)  // sfix23_En13
                                         );

  RADIX22FFT_SDNF2_8_block u_SDNF2_8_3 (.clk(clk),
                                        .reset(reset),
                                        .rotate_3(rotate_3),  // ufix1
                                        .dout_3_re(dout_3_re),  // sfix23_En13
                                        .dout_3_im(dout_3_im),  // sfix23_En13
                                        .dout_7_re(dout_7_re),  // sfix23_En13
                                        .dout_7_im(dout_7_im),  // sfix23_En13
                                        .dout_1_vld(dout_1_vld),
                                        .dout_3_re_1(dout_3_re_1),  // sfix24_En13
                                        .dout_3_im_1(dout_3_im_1),  // sfix24_En13
                                        .dout_4_re(dout_4_re_1),  // sfix24_En13
                                        .dout_4_im(dout_4_im_1)  // sfix24_En13
                                        );

  TWDLROM_9_2 u_twdlROM_9_2 (.clk(clk),
                             .reset(reset),
                             .dout_8_vld(dout_8_vld),
                             .twdl_9_2_re(twdl_9_2_re),  // sfix16_En14
                             .twdl_9_2_im(twdl_9_2_im)  // sfix16_En14
                             );

  RADIX22FFT_SDNF1_9 u_SDNF1_9_1 (.clk(clk),
                                  .reset(reset),
                                  .dout_1_re(dout_1_re_1),  // sfix24_En13
                                  .dout_1_im(dout_1_im_1),  // sfix24_En13
                                  .dout_3_re(dout_3_re_1),  // sfix24_En13
                                  .dout_3_im(dout_3_im_1),  // sfix24_En13
                                  .dout_8_vld(dout_8_vld),
                                  .twdl_9_2_re(twdl_9_2_re),  // sfix16_En14
                                  .twdl_9_2_im(twdl_9_2_im),  // sfix16_En14
                                  .dout_1_re_1(dout_1_re_2),  // sfix25_En13
                                  .dout_1_im_1(dout_1_im_2),  // sfix25_En13
                                  .dout_2_re(dout_2_re_2),  // sfix25_En13
                                  .dout_2_im(dout_2_im_2),  // sfix25_En13
                                  .dout_2_vld(dout_2_vld)
                                  );

  assign dataOut_re_0 = dout_1_re_2;

  assign dataOut_re_1 = dout_2_re_2;

  TWDLROM_9_4 u_twdlROM_9_4 (.clk(clk),
                             .reset(reset),
                             .dout_8_vld(dout_8_vld),
                             .twdl_9_4_re(twdl_9_4_re),  // sfix16_En14
                             .twdl_9_4_im(twdl_9_4_im)  // sfix16_En14
                             );

  RADIX22FFT_SDNF1_9_block u_SDNF1_9_3 (.clk(clk),
                                        .reset(reset),
                                        .dout_2_re(dout_2_re_1),  // sfix24_En13
                                        .dout_2_im(dout_2_im_1),  // sfix24_En13
                                        .dout_4_re(dout_4_re_1),  // sfix24_En13
                                        .dout_4_im(dout_4_im_1),  // sfix24_En13
                                        .dout_8_vld(dout_8_vld),
                                        .twdl_9_4_re(twdl_9_4_re),  // sfix16_En14
                                        .twdl_9_4_im(twdl_9_4_im),  // sfix16_En14
                                        .dout_3_re(dout_3_re_2),  // sfix25_En13
                                        .dout_3_im(dout_3_im_2),  // sfix25_En13
                                        .dout_4_re_1(dout_4_re_2),  // sfix25_En13
                                        .dout_4_im_1(dout_4_im_2)  // sfix25_En13
                                        );

  assign dataOut_re_2 = dout_3_re_2;

  assign dataOut_re_3 = dout_4_re_2;

  assign rotate_5 = 1'b1;



  RADIX22FFT_SDNF2_8_block1 u_SDNF2_8_5 (.clk(clk),
                                         .reset(reset),
                                         .rotate_5(rotate_5),  // ufix1
                                         .dout_2_re(dout_2_re),  // sfix23_En13
                                         .dout_2_im(dout_2_im),  // sfix23_En13
                                         .dout_6_re(dout_6_re),  // sfix23_En13
                                         .dout_6_im(dout_6_im),  // sfix23_En13
                                         .dout_1_vld(dout_1_vld),
                                         .dout_5_re(dout_5_re_1),  // sfix24_En13
                                         .dout_5_im(dout_5_im_1),  // sfix24_En13
                                         .dout_6_re_1(dout_6_re_1),  // sfix24_En13
                                         .dout_6_im_1(dout_6_im_1)  // sfix24_En13
                                         );

  assign rotate_7 = 1'b1;



  RADIX22FFT_SDNF2_8_block2 u_SDNF2_8_7 (.clk(clk),
                                         .reset(reset),
                                         .rotate_7(rotate_7),  // ufix1
                                         .dout_4_re(dout_4_re),  // sfix23_En13
                                         .dout_4_im(dout_4_im),  // sfix23_En13
                                         .dout_8_re(dout_8_re),  // sfix23_En13
                                         .dout_8_im(dout_8_im),  // sfix23_En13
                                         .dout_1_vld(dout_1_vld),
                                         .dout_7_re(dout_7_re_1),  // sfix24_En13
                                         .dout_7_im(dout_7_im_1),  // sfix24_En13
                                         .dout_8_re_1(dout_8_re_1),  // sfix24_En13
                                         .dout_8_im_1(dout_8_im_1)  // sfix24_En13
                                         );

  TWDLROM_9_6 u_twdlROM_9_6 (.clk(clk),
                             .reset(reset),
                             .dout_8_vld(dout_8_vld),
                             .twdl_9_6_re(twdl_9_6_re),  // sfix16_En14
                             .twdl_9_6_im(twdl_9_6_im)  // sfix16_En14
                             );

  RADIX22FFT_SDNF1_9_block1 u_SDNF1_9_5 (.clk(clk),
                                         .reset(reset),
                                         .dout_5_re(dout_5_re_1),  // sfix24_En13
                                         .dout_5_im(dout_5_im_1),  // sfix24_En13
                                         .dout_7_re(dout_7_re_1),  // sfix24_En13
                                         .dout_7_im(dout_7_im_1),  // sfix24_En13
                                         .dout_8_vld(dout_8_vld),
                                         .twdl_9_6_re(twdl_9_6_re),  // sfix16_En14
                                         .twdl_9_6_im(twdl_9_6_im),  // sfix16_En14
                                         .dout_5_re_1(dout_5_re_2),  // sfix25_En13
                                         .dout_5_im_1(dout_5_im_2),  // sfix25_En13
                                         .dout_6_re(dout_6_re_2),  // sfix25_En13
                                         .dout_6_im(dout_6_im_2)  // sfix25_En13
                                         );

  assign dataOut_re_4 = dout_5_re_2;

  assign dataOut_re_5 = dout_6_re_2;

  TWDLROM_9_8 u_twdlROM_9_8 (.clk(clk),
                             .reset(reset),
                             .dout_8_vld(dout_8_vld),
                             .twdl_9_8_re(twdl_9_8_re),  // sfix16_En14
                             .twdl_9_8_im(twdl_9_8_im)  // sfix16_En14
                             );

  RADIX22FFT_SDNF1_9_block2 u_SDNF1_9_7 (.clk(clk),
                                         .reset(reset),
                                         .dout_6_re(dout_6_re_1),  // sfix24_En13
                                         .dout_6_im(dout_6_im_1),  // sfix24_En13
                                         .dout_8_re(dout_8_re_1),  // sfix24_En13
                                         .dout_8_im(dout_8_im_1),  // sfix24_En13
                                         .dout_8_vld(dout_8_vld),
                                         .twdl_9_8_re(twdl_9_8_re),  // sfix16_En14
                                         .twdl_9_8_im(twdl_9_8_im),  // sfix16_En14
                                         .dout_7_re(dout_7_re_2),  // sfix25_En13
                                         .dout_7_im(dout_7_im_2),  // sfix25_En13
                                         .dout_8_re_1(dout_8_re_2),  // sfix25_En13
                                         .dout_8_im_1(dout_8_im_2)  // sfix25_En13
                                         );

  assign dataOut_re_6 = dout_7_re_2;

  assign dataOut_re_7 = dout_8_re_2;

  assign dataOut_im_0 = dout_1_im_2;

  assign dataOut_im_1 = dout_2_im_2;

  assign dataOut_im_2 = dout_3_im_2;

  assign dataOut_im_3 = dout_4_im_2;

  assign dataOut_im_4 = dout_5_im_2;

  assign dataOut_im_5 = dout_6_im_2;

  assign dataOut_im_6 = dout_7_im_2;

  assign dataOut_im_7 = dout_8_im_2;

  assign validOut = dout_2_vld;

endmodule  // FFT

