// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Burst\MINRESRX2_BUTTERFLY.v
// Created: 2024-05-11 18:31:33
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MINRESRX2_BUTTERFLY
// Source Path: FFTHDLOptimizedExample_Burst/FFT Burst/FFT/MINRESRX2_BUTTERFLY
// Hierarchy Level: 2
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MINRESRX2_BUTTERFLY
          (clk,
           reset,
           btfIn1_re,
           btfIn1_im,
           btfIn2_re,
           btfIn2_im,
           btfIn_vld,
           twdl_re,
           twdl_im,
           btfOut1_re,
           btfOut1_im,
           btfOut2_re,
           btfOut2_im,
           btfOut_vld);


  input   clk;
  input   reset;
  input   signed [24:0] btfIn1_re;  // sfix25_En13
  input   signed [24:0] btfIn1_im;  // sfix25_En13
  input   signed [24:0] btfIn2_re;  // sfix25_En13
  input   signed [24:0] btfIn2_im;  // sfix25_En13
  input   btfIn_vld;
  input   signed [24:0] twdl_re;  // sfix25_En23
  input   signed [24:0] twdl_im;  // sfix25_En23
  output  signed [24:0] btfOut1_re;  // sfix25_En13
  output  signed [24:0] btfOut1_im;  // sfix25_En13
  output  signed [24:0] btfOut2_re;  // sfix25_En13
  output  signed [24:0] btfOut2_im;  // sfix25_En13
  output  btfOut_vld;


  reg signed [24:0] intdelay_reg [0:1];  // sfix25 [2]
  wire signed [24:0] intdelay_reg_next [0:1];  // sfix25_En13 [2]
  wire signed [24:0] din2Dly_re;  // sfix25_En13
  reg signed [24:0] intdelay_reg_1 [0:1];  // sfix25 [2]
  wire signed [24:0] intdelay_reg_next_1 [0:1];  // sfix25_En13 [2]
  wire signed [24:0] din2Dly_im;  // sfix25_En13
  wire signed [50:0] dinXTwdl_re;  // sfix51_En36
  wire signed [50:0] dinXTwdl_im;  // sfix51_En36
  wire dinXTwdl_vld;
  reg signed [24:0] intdelay_reg_2 [0:7];  // sfix25 [8]
  reg signed [24:0] intdelay_reg_next_2 [0:7];  // sfix25_En13 [8]
  reg signed [24:0] din1Dly_re;  // sfix25_En13
  reg signed [24:0] intdelay_reg_3 [0:7];  // sfix25 [8]
  reg signed [24:0] intdelay_reg_next_3 [0:7];  // sfix25_En13 [8]
  reg signed [24:0] din1Dly_im;  // sfix25_En13
  reg  [7:0] intdelay_reg_4;  // ufix1 [8]
  wire din1Dly_vld;
  reg signed [51:0] minResRX2FFTButterfly_add1_re;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_add1_im;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_sub1_re;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_sub1_im;  // sfix52
  reg  minResRX2FFTButterfly_vld_reg;
  reg signed [51:0] minResRX2FFTButterfly_add1_cast_re;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_add1_cast_im;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_sub1_cast_re;  // sfix52
  reg signed [51:0] minResRX2FFTButterfly_sub1_cast_im;  // sfix52
  wire signed [51:0] minResRX2FFTButterfly_add1_re_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add1_im_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub1_re_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub1_im_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add1_cast_re_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add1_cast_im_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub1_cast_re_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub1_cast_im_next;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add_cast;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add_cast_1;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add_cast_2;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_add_cast_3;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub_cast;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub_cast_1;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub_cast_2;  // sfix52_En36
  wire signed [51:0] minResRX2FFTButterfly_sub_cast_3;  // sfix52_En36
  wire signed [51:0] btfOut1FP_re;  // sfix52_En36
  wire signed [51:0] btfOut1FP_im;  // sfix52_En36
  wire signed [51:0] btfOut2FP_re;  // sfix52_En36
  wire signed [51:0] btfOut2FP_im;  // sfix52_En36
  reg  btfOut_vld_1;
  reg signed [31:0] intdelay_t_0_0;  // int32
  reg signed [31:0] intdelay_t_1;  // int32
  reg signed [31:0] intdelay_t_0_0_1;  // int32
  reg signed [31:0] intdelay_t_0_0_2;  // int32
  reg signed [31:0] intdelay_t_0_1;  // int32
  reg signed [31:0] intdelay_t_1_1;  // int32
  reg signed [31:0] intdelay_t_0_01;  // int32
  reg signed [31:0] intdelay_t_1_2;  // int32


  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd1; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg[intdelay_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        for(intdelay_t_0_0 = 32'sd0; intdelay_t_0_0 <= 32'sd1; intdelay_t_0_0 = intdelay_t_0_0 + 32'sd1) begin
          intdelay_reg[intdelay_t_0_0] <= intdelay_reg_next[intdelay_t_0_0];
        end
      end
    end

  assign din2Dly_re = intdelay_reg[1];
  assign intdelay_reg_next[0] = btfIn2_re;
  assign intdelay_reg_next[1] = intdelay_reg[0];



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        for(intdelay_t_1 = 32'sd0; intdelay_t_1 <= 32'sd1; intdelay_t_1 = intdelay_t_1 + 32'sd1) begin
          intdelay_reg_1[intdelay_t_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        for(intdelay_t_0_0_1 = 32'sd0; intdelay_t_0_0_1 <= 32'sd1; intdelay_t_0_0_1 = intdelay_t_0_0_1 + 32'sd1) begin
          intdelay_reg_1[intdelay_t_0_0_1] <= intdelay_reg_next_1[intdelay_t_0_0_1];
        end
      end
    end

  assign din2Dly_im = intdelay_reg_1[1];
  assign intdelay_reg_next_1[0] = btfIn2_im;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];



  Complex4Multiply u_MUL4 (.clk(clk),
                           .reset(reset),
                           .btfIn2_re(din2Dly_re),  // sfix25_En13
                           .btfIn2_im(din2Dly_im),  // sfix25_En13
                           .din2Dly_vld(btfIn_vld),
                           .twdl_re(twdl_re),  // sfix25_En23
                           .twdl_im(twdl_im),  // sfix25_En23
                           .dinXTwdl_re(dinXTwdl_re),  // sfix51_En36
                           .dinXTwdl_im(dinXTwdl_im),  // sfix51_En36
                           .dinXTwdl_vld(dinXTwdl_vld)
                           );

  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_1 = 32'sd0; intdelay_t_1_1 <= 32'sd7; intdelay_t_1_1 = intdelay_t_1_1 + 32'sd1) begin
          intdelay_reg_2[intdelay_t_1_1] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd7; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
          intdelay_reg_2[intdelay_t_0_1] <= intdelay_reg_next_2[intdelay_t_0_1];
        end
      end
    end

  always @* begin
    din1Dly_re = intdelay_reg_2[7];
    intdelay_reg_next_2[0] = btfIn1_re;

    for(intdelay_t_0_0_2 = 32'sd0; intdelay_t_0_0_2 <= 32'sd6; intdelay_t_0_0_2 = intdelay_t_0_0_2 + 32'sd1) begin
      intdelay_reg_next_2[intdelay_t_0_0_2 + 32'sd1] = intdelay_reg_2[intdelay_t_0_0_2];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        for(intdelay_t_1_2 = 32'sd0; intdelay_t_1_2 <= 32'sd7; intdelay_t_1_2 = intdelay_t_1_2 + 32'sd1) begin
          intdelay_reg_3[intdelay_t_1_2] <= 25'sb0000000000000000000000000;
        end
      end
      else begin
        for(intdelay_t_0_1 = 32'sd0; intdelay_t_0_1 <= 32'sd7; intdelay_t_0_1 = intdelay_t_0_1 + 32'sd1) begin
          intdelay_reg_3[intdelay_t_0_1] <= intdelay_reg_next_3[intdelay_t_0_1];
        end
      end
    end

  always @* begin
    din1Dly_im = intdelay_reg_3[7];
    intdelay_reg_next_3[0] = btfIn1_im;

    for(intdelay_t_0_01 = 32'sd0; intdelay_t_0_01 <= 32'sd6; intdelay_t_0_01 = intdelay_t_0_01 + 32'sd1) begin
      intdelay_reg_next_3[intdelay_t_0_01 + 32'sd1] = intdelay_reg_3[intdelay_t_0_01];
    end

  end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        intdelay_reg_4 <= {8{1'b0}};
      end
      else begin
        intdelay_reg_4[0] <= btfIn_vld;
        intdelay_reg_4[32'sd7:32'sd1] <= intdelay_reg_4[32'sd6:32'sd0];
      end
    end

  assign din1Dly_vld = intdelay_reg_4[7];



  // minResRX2FFTButterfly
  always @(posedge clk or posedge reset)
    begin : minResRX2FFTButterfly_process
      if (reset == 1'b1) begin
        minResRX2FFTButterfly_add1_re <= 52'sh0000000000000;
        minResRX2FFTButterfly_add1_im <= 52'sh0000000000000;
        minResRX2FFTButterfly_sub1_re <= 52'sh0000000000000;
        minResRX2FFTButterfly_sub1_im <= 52'sh0000000000000;
        minResRX2FFTButterfly_add1_cast_re <= 52'sh0000000000000;
        minResRX2FFTButterfly_add1_cast_im <= 52'sh0000000000000;
        minResRX2FFTButterfly_sub1_cast_re <= 52'sh0000000000000;
        minResRX2FFTButterfly_sub1_cast_im <= 52'sh0000000000000;
        minResRX2FFTButterfly_vld_reg <= 1'b0;
        btfOut_vld_1 <= 1'b0;
      end
      else begin
        minResRX2FFTButterfly_add1_re <= minResRX2FFTButterfly_add1_re_next;
        minResRX2FFTButterfly_add1_im <= minResRX2FFTButterfly_add1_im_next;
        minResRX2FFTButterfly_sub1_re <= minResRX2FFTButterfly_sub1_re_next;
        minResRX2FFTButterfly_sub1_im <= minResRX2FFTButterfly_sub1_im_next;
        minResRX2FFTButterfly_add1_cast_re <= minResRX2FFTButterfly_add1_cast_re_next;
        minResRX2FFTButterfly_add1_cast_im <= minResRX2FFTButterfly_add1_cast_im_next;
        minResRX2FFTButterfly_sub1_cast_re <= minResRX2FFTButterfly_sub1_cast_re_next;
        minResRX2FFTButterfly_sub1_cast_im <= minResRX2FFTButterfly_sub1_cast_im_next;
        btfOut_vld_1 <= minResRX2FFTButterfly_vld_reg;
        minResRX2FFTButterfly_vld_reg <= din1Dly_vld;
      end
    end

  assign minResRX2FFTButterfly_add1_cast_re_next = minResRX2FFTButterfly_add1_re;
  assign minResRX2FFTButterfly_add1_cast_im_next = minResRX2FFTButterfly_add1_im;
  assign minResRX2FFTButterfly_sub1_cast_re_next = minResRX2FFTButterfly_sub1_re;
  assign minResRX2FFTButterfly_sub1_cast_im_next = minResRX2FFTButterfly_sub1_im;
  assign minResRX2FFTButterfly_add_cast = {{4{din1Dly_re[24]}}, {din1Dly_re, 23'b00000000000000000000000}};
  assign minResRX2FFTButterfly_add_cast_1 = {dinXTwdl_re[50], dinXTwdl_re};
  assign minResRX2FFTButterfly_add1_re_next = minResRX2FFTButterfly_add_cast + minResRX2FFTButterfly_add_cast_1;
  assign minResRX2FFTButterfly_add_cast_2 = {{4{din1Dly_im[24]}}, {din1Dly_im, 23'b00000000000000000000000}};
  assign minResRX2FFTButterfly_add_cast_3 = {dinXTwdl_im[50], dinXTwdl_im};
  assign minResRX2FFTButterfly_add1_im_next = minResRX2FFTButterfly_add_cast_2 + minResRX2FFTButterfly_add_cast_3;
  assign minResRX2FFTButterfly_sub_cast = {{4{din1Dly_re[24]}}, {din1Dly_re, 23'b00000000000000000000000}};
  assign minResRX2FFTButterfly_sub_cast_1 = {dinXTwdl_re[50], dinXTwdl_re};
  assign minResRX2FFTButterfly_sub1_re_next = minResRX2FFTButterfly_sub_cast - minResRX2FFTButterfly_sub_cast_1;
  assign minResRX2FFTButterfly_sub_cast_2 = {{4{din1Dly_im[24]}}, {din1Dly_im, 23'b00000000000000000000000}};
  assign minResRX2FFTButterfly_sub_cast_3 = {dinXTwdl_im[50], dinXTwdl_im};
  assign minResRX2FFTButterfly_sub1_im_next = minResRX2FFTButterfly_sub_cast_2 - minResRX2FFTButterfly_sub_cast_3;
  assign btfOut1FP_re = minResRX2FFTButterfly_add1_cast_re;
  assign btfOut1FP_im = minResRX2FFTButterfly_add1_cast_im;
  assign btfOut2FP_re = minResRX2FFTButterfly_sub1_cast_re;
  assign btfOut2FP_im = minResRX2FFTButterfly_sub1_cast_im;



  assign btfOut1_re = btfOut1FP_re[47:23];



  assign btfOut1_im = btfOut1FP_im[47:23];



  assign btfOut2_re = btfOut2FP_re[47:23];



  assign btfOut2_im = btfOut2FP_im[47:23];



  assign btfOut_vld = btfOut_vld_1;

endmodule  // MINRESRX2_BUTTERFLY

