// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Streaming\RADIX22FFT_SDNF1_9.v
// Created: 2024-05-11 19:34:43
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: RADIX22FFT_SDNF1_9
// Source Path: FFTHDLOptimizedExample_Streaming/FFT Streaming/FFT/RADIX22FFT_SDNF1_9
// Hierarchy Level: 2
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module RADIX22FFT_SDNF1_9
          (clk,
           reset,
           dout_1_re,
           dout_1_im,
           dout_3_re,
           dout_3_im,
           dout_8_vld,
           twdl_9_2_re,
           twdl_9_2_im,
           dout_1_re_1,
           dout_1_im_1,
           dout_2_re,
           dout_2_im,
           dout_2_vld);


  input   clk;
  input   reset;
  input   signed [23:0] dout_1_re;  // sfix24_En13
  input   signed [23:0] dout_1_im;  // sfix24_En13
  input   signed [23:0] dout_3_re;  // sfix24_En13
  input   signed [23:0] dout_3_im;  // sfix24_En13
  input   dout_8_vld;
  input   signed [15:0] twdl_9_2_re;  // sfix16_En14
  input   signed [15:0] twdl_9_2_im;  // sfix16_En14
  output  signed [24:0] dout_1_re_1;  // sfix25_En13
  output  signed [24:0] dout_1_im_1;  // sfix25_En13
  output  signed [24:0] dout_2_re;  // sfix25_En13
  output  signed [24:0] dout_2_im;  // sfix25_En13
  output  dout_2_vld;


  wire signed [24:0] din_re;  // sfix25_En13
  reg signed [24:0] din1_re_dly1;  // sfix25_En13
  reg signed [24:0] din1_re_dly2;  // sfix25_En13
  reg signed [24:0] din1_re_dly3;  // sfix25_En13
  reg signed [24:0] din1_re_dly4;  // sfix25_En13
  reg signed [24:0] din1_re_dly5;  // sfix25_En13
  reg signed [24:0] din1_re_dly6;  // sfix25_En13
  reg signed [24:0] din1_re_dly7;  // sfix25_En13
  reg signed [24:0] din1_re_dly8;  // sfix25_En13
  reg signed [24:0] din1_re_dly9;  // sfix25_En13
  wire signed [24:0] din_im;  // sfix25_En13
  reg signed [24:0] din1_im_dly1;  // sfix25_En13
  reg signed [24:0] din1_im_dly2;  // sfix25_En13
  reg signed [24:0] din1_im_dly3;  // sfix25_En13
  reg signed [24:0] din1_im_dly4;  // sfix25_En13
  reg signed [24:0] din1_im_dly5;  // sfix25_En13
  reg signed [24:0] din1_im_dly6;  // sfix25_En13
  reg signed [24:0] din1_im_dly7;  // sfix25_En13
  reg signed [24:0] din1_im_dly8;  // sfix25_En13
  reg signed [24:0] din1_im_dly9;  // sfix25_En13
  wire signed [24:0] din_re_1;  // sfix25_En13
  reg signed [24:0] din2_re_dly1;  // sfix25_En13
  reg signed [24:0] din2_re_dly2;  // sfix25_En13
  reg signed [24:0] din2_re_dly3;  // sfix25_En13
  wire signed [24:0] din_im_1;  // sfix25_En13
  reg signed [24:0] din2_im_dly1;  // sfix25_En13
  reg signed [24:0] din2_im_dly2;  // sfix25_En13
  reg signed [24:0] din2_im_dly3;  // sfix25_En13
  reg  di2_vld_dly1;
  reg  di2_vld_dly2;
  reg  di2_vld_dly3;
  wire signed [24:0] dinXTwdl2_re;  // sfix25_En13
  wire signed [24:0] dinXTwdl2_im;  // sfix25_En13
  reg  din_vld_dly1;
  reg  din_vld_dly2;
  reg  din_vld_dly3;
  reg  din_vld_dly4;
  reg  din_vld_dly5;
  reg  din_vld_dly6;
  reg  din_vld_dly7;
  reg  din_vld_dly8;
  reg  din_vld_dly9;
  reg signed [25:0] Radix22ButterflyG1_NF_btf1_re_reg;  // sfix26
  reg signed [25:0] Radix22ButterflyG1_NF_btf1_im_reg;  // sfix26
  reg signed [25:0] Radix22ButterflyG1_NF_btf2_re_reg;  // sfix26
  reg signed [25:0] Radix22ButterflyG1_NF_btf2_im_reg;  // sfix26
  reg  Radix22ButterflyG1_NF_dinXtwdl_vld_dly1;
  reg signed [25:0] Radix22ButterflyG1_NF_btf1_re_reg_next;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_btf1_im_reg_next;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_btf2_re_reg_next;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_btf2_im_reg_next;  // sfix26_En13
  reg  Radix22ButterflyG1_NF_dinXtwdl_vld_dly1_next;
  reg signed [24:0] dout_1_re_2;  // sfix25_En13
  reg signed [24:0] dout_1_im_2;  // sfix25_En13
  reg signed [24:0] dout_2_re_1;  // sfix25_En13
  reg signed [24:0] dout_2_im_1;  // sfix25_En13
  reg  dout_2_vld_1;
  reg signed [25:0] Radix22ButterflyG1_NF_add_cast;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_add_cast_0;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_sub_cast;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_sub_cast_0;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_add_cast_1;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_add_cast_2;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_sub_cast_1;  // sfix26_En13
  reg signed [25:0] Radix22ButterflyG1_NF_sub_cast_2;  // sfix26_En13


  assign din_re = {dout_1_re[23], dout_1_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_process
      if (reset == 1'b1) begin
        din1_re_dly1 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly1 <= din_re;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_1_process
      if (reset == 1'b1) begin
        din1_re_dly2 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly2 <= din1_re_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_2_process
      if (reset == 1'b1) begin
        din1_re_dly3 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly3 <= din1_re_dly2;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_3_process
      if (reset == 1'b1) begin
        din1_re_dly4 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly4 <= din1_re_dly3;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_4_process
      if (reset == 1'b1) begin
        din1_re_dly5 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly5 <= din1_re_dly4;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_5_process
      if (reset == 1'b1) begin
        din1_re_dly6 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly6 <= din1_re_dly5;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_6_process
      if (reset == 1'b1) begin
        din1_re_dly7 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly7 <= din1_re_dly6;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_7_process
      if (reset == 1'b1) begin
        din1_re_dly8 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly8 <= din1_re_dly7;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_8_process
      if (reset == 1'b1) begin
        din1_re_dly9 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_re_dly9 <= din1_re_dly8;
      end
    end



  assign din_im = {dout_1_im[23], dout_1_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_9_process
      if (reset == 1'b1) begin
        din1_im_dly1 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly1 <= din_im;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_10_process
      if (reset == 1'b1) begin
        din1_im_dly2 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly2 <= din1_im_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_11_process
      if (reset == 1'b1) begin
        din1_im_dly3 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly3 <= din1_im_dly2;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_12_process
      if (reset == 1'b1) begin
        din1_im_dly4 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly4 <= din1_im_dly3;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_13_process
      if (reset == 1'b1) begin
        din1_im_dly5 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly5 <= din1_im_dly4;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_14_process
      if (reset == 1'b1) begin
        din1_im_dly6 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly6 <= din1_im_dly5;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_15_process
      if (reset == 1'b1) begin
        din1_im_dly7 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly7 <= din1_im_dly6;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_16_process
      if (reset == 1'b1) begin
        din1_im_dly8 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly8 <= din1_im_dly7;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_17_process
      if (reset == 1'b1) begin
        din1_im_dly9 <= 25'sb0000000000000000000000000;
      end
      else begin
        din1_im_dly9 <= din1_im_dly8;
      end
    end



  assign din_re_1 = {dout_3_re[23], dout_3_re};



  always @(posedge clk or posedge reset)
    begin : intdelay_18_process
      if (reset == 1'b1) begin
        din2_re_dly1 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_re_dly1 <= din_re_1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_19_process
      if (reset == 1'b1) begin
        din2_re_dly2 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_re_dly2 <= din2_re_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_20_process
      if (reset == 1'b1) begin
        din2_re_dly3 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_re_dly3 <= din2_re_dly2;
      end
    end



  assign din_im_1 = {dout_3_im[23], dout_3_im};



  always @(posedge clk or posedge reset)
    begin : intdelay_21_process
      if (reset == 1'b1) begin
        din2_im_dly1 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_im_dly1 <= din_im_1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_22_process
      if (reset == 1'b1) begin
        din2_im_dly2 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_im_dly2 <= din2_im_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_23_process
      if (reset == 1'b1) begin
        din2_im_dly3 <= 25'sb0000000000000000000000000;
      end
      else begin
        din2_im_dly3 <= din2_im_dly2;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_24_process
      if (reset == 1'b1) begin
        di2_vld_dly1 <= 1'b0;
      end
      else begin
        di2_vld_dly1 <= dout_8_vld;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_25_process
      if (reset == 1'b1) begin
        di2_vld_dly2 <= 1'b0;
      end
      else begin
        di2_vld_dly2 <= di2_vld_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_26_process
      if (reset == 1'b1) begin
        di2_vld_dly3 <= 1'b0;
      end
      else begin
        di2_vld_dly3 <= di2_vld_dly2;
      end
    end



  Complex4Multiply_block22 u_MUL4_2 (.clk(clk),
                                     .reset(reset),
                                     .din2_re_dly3(din2_re_dly3),  // sfix25_En13
                                     .din2_im_dly3(din2_im_dly3),  // sfix25_En13
                                     .di2_vld_dly3(di2_vld_dly3),
                                     .twdl_9_2_re(twdl_9_2_re),  // sfix16_En14
                                     .twdl_9_2_im(twdl_9_2_im),  // sfix16_En14
                                     .dinXTwdl2_re(dinXTwdl2_re),  // sfix25_En13
                                     .dinXTwdl2_im(dinXTwdl2_im)  // sfix25_En13
                                     );

  always @(posedge clk or posedge reset)
    begin : intdelay_27_process
      if (reset == 1'b1) begin
        din_vld_dly1 <= 1'b0;
      end
      else begin
        din_vld_dly1 <= dout_8_vld;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_28_process
      if (reset == 1'b1) begin
        din_vld_dly2 <= 1'b0;
      end
      else begin
        din_vld_dly2 <= din_vld_dly1;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_29_process
      if (reset == 1'b1) begin
        din_vld_dly3 <= 1'b0;
      end
      else begin
        din_vld_dly3 <= din_vld_dly2;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_30_process
      if (reset == 1'b1) begin
        din_vld_dly4 <= 1'b0;
      end
      else begin
        din_vld_dly4 <= din_vld_dly3;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_31_process
      if (reset == 1'b1) begin
        din_vld_dly5 <= 1'b0;
      end
      else begin
        din_vld_dly5 <= din_vld_dly4;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_32_process
      if (reset == 1'b1) begin
        din_vld_dly6 <= 1'b0;
      end
      else begin
        din_vld_dly6 <= din_vld_dly5;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_33_process
      if (reset == 1'b1) begin
        din_vld_dly7 <= 1'b0;
      end
      else begin
        din_vld_dly7 <= din_vld_dly6;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_34_process
      if (reset == 1'b1) begin
        din_vld_dly8 <= 1'b0;
      end
      else begin
        din_vld_dly8 <= din_vld_dly7;
      end
    end



  always @(posedge clk or posedge reset)
    begin : intdelay_35_process
      if (reset == 1'b1) begin
        din_vld_dly9 <= 1'b0;
      end
      else begin
        din_vld_dly9 <= din_vld_dly8;
      end
    end



  // Radix22ButterflyG1_NF
  always @(posedge clk or posedge reset)
    begin : Radix22ButterflyG1_NF_process
      if (reset == 1'b1) begin
        Radix22ButterflyG1_NF_btf1_re_reg <= 26'sb00000000000000000000000000;
        Radix22ButterflyG1_NF_btf1_im_reg <= 26'sb00000000000000000000000000;
        Radix22ButterflyG1_NF_btf2_re_reg <= 26'sb00000000000000000000000000;
        Radix22ButterflyG1_NF_btf2_im_reg <= 26'sb00000000000000000000000000;
        Radix22ButterflyG1_NF_dinXtwdl_vld_dly1 <= 1'b0;
      end
      else begin
        Radix22ButterflyG1_NF_btf1_re_reg <= Radix22ButterflyG1_NF_btf1_re_reg_next;
        Radix22ButterflyG1_NF_btf1_im_reg <= Radix22ButterflyG1_NF_btf1_im_reg_next;
        Radix22ButterflyG1_NF_btf2_re_reg <= Radix22ButterflyG1_NF_btf2_re_reg_next;
        Radix22ButterflyG1_NF_btf2_im_reg <= Radix22ButterflyG1_NF_btf2_im_reg_next;
        Radix22ButterflyG1_NF_dinXtwdl_vld_dly1 <= Radix22ButterflyG1_NF_dinXtwdl_vld_dly1_next;
      end
    end

  always @(Radix22ButterflyG1_NF_btf1_im_reg, Radix22ButterflyG1_NF_btf1_re_reg,
       Radix22ButterflyG1_NF_btf2_im_reg, Radix22ButterflyG1_NF_btf2_re_reg,
       Radix22ButterflyG1_NF_dinXtwdl_vld_dly1, din1_im_dly9, din1_re_dly9,
       dinXTwdl2_im, dinXTwdl2_re, din_vld_dly9) begin
    Radix22ButterflyG1_NF_add_cast = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_add_cast_0 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_sub_cast = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_sub_cast_0 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_add_cast_1 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_add_cast_2 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_sub_cast_1 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_sub_cast_2 = 26'sb00000000000000000000000000;
    Radix22ButterflyG1_NF_btf1_re_reg_next = Radix22ButterflyG1_NF_btf1_re_reg;
    Radix22ButterflyG1_NF_btf1_im_reg_next = Radix22ButterflyG1_NF_btf1_im_reg;
    Radix22ButterflyG1_NF_btf2_re_reg_next = Radix22ButterflyG1_NF_btf2_re_reg;
    Radix22ButterflyG1_NF_btf2_im_reg_next = Radix22ButterflyG1_NF_btf2_im_reg;
    Radix22ButterflyG1_NF_dinXtwdl_vld_dly1_next = din_vld_dly9;
    if (din_vld_dly9) begin
      Radix22ButterflyG1_NF_add_cast = {din1_re_dly9[24], din1_re_dly9};
      Radix22ButterflyG1_NF_add_cast_0 = {dinXTwdl2_re[24], dinXTwdl2_re};
      Radix22ButterflyG1_NF_btf1_re_reg_next = Radix22ButterflyG1_NF_add_cast + Radix22ButterflyG1_NF_add_cast_0;
      Radix22ButterflyG1_NF_sub_cast = {din1_re_dly9[24], din1_re_dly9};
      Radix22ButterflyG1_NF_sub_cast_0 = {dinXTwdl2_re[24], dinXTwdl2_re};
      Radix22ButterflyG1_NF_btf2_re_reg_next = Radix22ButterflyG1_NF_sub_cast - Radix22ButterflyG1_NF_sub_cast_0;
      Radix22ButterflyG1_NF_add_cast_1 = {din1_im_dly9[24], din1_im_dly9};
      Radix22ButterflyG1_NF_add_cast_2 = {dinXTwdl2_im[24], dinXTwdl2_im};
      Radix22ButterflyG1_NF_btf1_im_reg_next = Radix22ButterflyG1_NF_add_cast_1 + Radix22ButterflyG1_NF_add_cast_2;
      Radix22ButterflyG1_NF_sub_cast_1 = {din1_im_dly9[24], din1_im_dly9};
      Radix22ButterflyG1_NF_sub_cast_2 = {dinXTwdl2_im[24], dinXTwdl2_im};
      Radix22ButterflyG1_NF_btf2_im_reg_next = Radix22ButterflyG1_NF_sub_cast_1 - Radix22ButterflyG1_NF_sub_cast_2;
    end
    dout_1_re_2 = Radix22ButterflyG1_NF_btf1_re_reg[24:0];
    dout_1_im_2 = Radix22ButterflyG1_NF_btf1_im_reg[24:0];
    dout_2_re_1 = Radix22ButterflyG1_NF_btf2_re_reg[24:0];
    dout_2_im_1 = Radix22ButterflyG1_NF_btf2_im_reg[24:0];
    dout_2_vld_1 = Radix22ButterflyG1_NF_dinXtwdl_vld_dly1;
  end



  assign dout_1_re_1 = dout_1_re_2;

  assign dout_1_im_1 = dout_1_im_2;

  assign dout_2_re = dout_2_re_1;

  assign dout_2_im = dout_2_im_1;

  assign dout_2_vld = dout_2_vld_1;

endmodule  // RADIX22FFT_SDNF1_9

