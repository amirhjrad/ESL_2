// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\FFTHDLOptimizedExample_Streaming\FFT_Streaming.v
// Created: 2024-05-11 19:34:43
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: FFT_Streaming
// Source Path: FFTHDLOptimizedExample_Streaming/FFT Streaming
// Hierarchy Level: 0
// Model version: 8.0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module FFT_Streaming
          (clk,
           reset,
           DataIn_re_0,
           DataIn_re_1,
           DataIn_re_2,
           DataIn_re_3,
           DataIn_re_4,
           DataIn_re_5,
           DataIn_re_6,
           DataIn_re_7,
           DataIn_im_0,
           DataIn_im_1,
           DataIn_im_2,
           DataIn_im_3,
           DataIn_im_4,
           DataIn_im_5,
           DataIn_im_6,
           DataIn_im_7,
           ValidIn,
           DataOut_re_0,
           DataOut_re_1,
           DataOut_re_2,
           DataOut_re_3,
           DataOut_re_4,
           DataOut_re_5,
           DataOut_re_6,
           DataOut_re_7,
           DataOut_im_0,
           DataOut_im_1,
           DataOut_im_2,
           DataOut_im_3,
           DataOut_im_4,
           DataOut_im_5,
           DataOut_im_6,
           DataOut_im_7,
           ValidOut);


  input   clk;
  input   reset;
  input   signed [15:0] DataIn_re_0;  // sfix16_En13
  input   signed [15:0] DataIn_re_1;  // sfix16_En13
  input   signed [15:0] DataIn_re_2;  // sfix16_En13
  input   signed [15:0] DataIn_re_3;  // sfix16_En13
  input   signed [15:0] DataIn_re_4;  // sfix16_En13
  input   signed [15:0] DataIn_re_5;  // sfix16_En13
  input   signed [15:0] DataIn_re_6;  // sfix16_En13
  input   signed [15:0] DataIn_re_7;  // sfix16_En13
  input   signed [15:0] DataIn_im_0;  // sfix16_En13
  input   signed [15:0] DataIn_im_1;  // sfix16_En13
  input   signed [15:0] DataIn_im_2;  // sfix16_En13
  input   signed [15:0] DataIn_im_3;  // sfix16_En13
  input   signed [15:0] DataIn_im_4;  // sfix16_En13
  input   signed [15:0] DataIn_im_5;  // sfix16_En13
  input   signed [15:0] DataIn_im_6;  // sfix16_En13
  input   signed [15:0] DataIn_im_7;  // sfix16_En13
  input   ValidIn;
  output  signed [24:0] DataOut_re_0;  // sfix25_En13
  output  signed [24:0] DataOut_re_1;  // sfix25_En13
  output  signed [24:0] DataOut_re_2;  // sfix25_En13
  output  signed [24:0] DataOut_re_3;  // sfix25_En13
  output  signed [24:0] DataOut_re_4;  // sfix25_En13
  output  signed [24:0] DataOut_re_5;  // sfix25_En13
  output  signed [24:0] DataOut_re_6;  // sfix25_En13
  output  signed [24:0] DataOut_re_7;  // sfix25_En13
  output  signed [24:0] DataOut_im_0;  // sfix25_En13
  output  signed [24:0] DataOut_im_1;  // sfix25_En13
  output  signed [24:0] DataOut_im_2;  // sfix25_En13
  output  signed [24:0] DataOut_im_3;  // sfix25_En13
  output  signed [24:0] DataOut_im_4;  // sfix25_En13
  output  signed [24:0] DataOut_im_5;  // sfix25_En13
  output  signed [24:0] DataOut_im_6;  // sfix25_En13
  output  signed [24:0] DataOut_im_7;  // sfix25_En13
  output  ValidOut;


  wire signed [24:0] FFT_out1_re_0;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_1;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_2;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_3;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_4;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_5;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_6;  // sfix25_En13
  wire signed [24:0] FFT_out1_re_7;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_0;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_1;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_2;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_3;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_4;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_5;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_6;  // sfix25_En13
  wire signed [24:0] FFT_out1_im_7;  // sfix25_En13
  wire FFT_out2;


  FFT u_FFT (.clk(clk),
             .reset(reset),
             .dataIn_re_0(DataIn_re_0),  // sfix16_En13
             .dataIn_re_1(DataIn_re_1),  // sfix16_En13
             .dataIn_re_2(DataIn_re_2),  // sfix16_En13
             .dataIn_re_3(DataIn_re_3),  // sfix16_En13
             .dataIn_re_4(DataIn_re_4),  // sfix16_En13
             .dataIn_re_5(DataIn_re_5),  // sfix16_En13
             .dataIn_re_6(DataIn_re_6),  // sfix16_En13
             .dataIn_re_7(DataIn_re_7),  // sfix16_En13
             .dataIn_im_0(DataIn_im_0),  // sfix16_En13
             .dataIn_im_1(DataIn_im_1),  // sfix16_En13
             .dataIn_im_2(DataIn_im_2),  // sfix16_En13
             .dataIn_im_3(DataIn_im_3),  // sfix16_En13
             .dataIn_im_4(DataIn_im_4),  // sfix16_En13
             .dataIn_im_5(DataIn_im_5),  // sfix16_En13
             .dataIn_im_6(DataIn_im_6),  // sfix16_En13
             .dataIn_im_7(DataIn_im_7),  // sfix16_En13
             .validIn(ValidIn),
             .dataOut_re_0(FFT_out1_re_0),  // sfix25_En13
             .dataOut_re_1(FFT_out1_re_1),  // sfix25_En13
             .dataOut_re_2(FFT_out1_re_2),  // sfix25_En13
             .dataOut_re_3(FFT_out1_re_3),  // sfix25_En13
             .dataOut_re_4(FFT_out1_re_4),  // sfix25_En13
             .dataOut_re_5(FFT_out1_re_5),  // sfix25_En13
             .dataOut_re_6(FFT_out1_re_6),  // sfix25_En13
             .dataOut_re_7(FFT_out1_re_7),  // sfix25_En13
             .dataOut_im_0(FFT_out1_im_0),  // sfix25_En13
             .dataOut_im_1(FFT_out1_im_1),  // sfix25_En13
             .dataOut_im_2(FFT_out1_im_2),  // sfix25_En13
             .dataOut_im_3(FFT_out1_im_3),  // sfix25_En13
             .dataOut_im_4(FFT_out1_im_4),  // sfix25_En13
             .dataOut_im_5(FFT_out1_im_5),  // sfix25_En13
             .dataOut_im_6(FFT_out1_im_6),  // sfix25_En13
             .dataOut_im_7(FFT_out1_im_7),  // sfix25_En13
             .validOut(FFT_out2)
             );
  assign DataOut_re_0 = FFT_out1_re_0;

  assign DataOut_re_1 = FFT_out1_re_1;

  assign DataOut_re_2 = FFT_out1_re_2;

  assign DataOut_re_3 = FFT_out1_re_3;

  assign DataOut_re_4 = FFT_out1_re_4;

  assign DataOut_re_5 = FFT_out1_re_5;

  assign DataOut_re_6 = FFT_out1_re_6;

  assign DataOut_re_7 = FFT_out1_re_7;

  assign DataOut_im_0 = FFT_out1_im_0;

  assign DataOut_im_1 = FFT_out1_im_1;

  assign DataOut_im_2 = FFT_out1_im_2;

  assign DataOut_im_3 = FFT_out1_im_3;

  assign DataOut_im_4 = FFT_out1_im_4;

  assign DataOut_im_5 = FFT_out1_im_5;

  assign DataOut_im_6 = FFT_out1_im_6;

  assign DataOut_im_7 = FFT_out1_im_7;

  assign ValidOut = FFT_out2;

endmodule  // FFT_Streaming

